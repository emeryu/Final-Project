AN <-read_graph(paste(d.path,"weighted_network_c0ol2_day11.graphml",
sep="/"),format=c("graphml"))
identify.targets(AN,betweenness,2,131,20,343434)
#lets try it with a new network:
#here is an ant colony
AN <-read_graph(paste(d.path,"weighted_network_c0ol2_day11.graphml",
sep="/"),format=c("graphml"))
AN <-read_graph(paste(d.path,"weighted_network_c0ol2_day11.graphml",
sep="/"),format=c("graphml"))
#lets try it with a new network:
#here is an ant colony
AN <-read_graph(paste(d.path,"weighted_network_col2_day11.graphml",
sep="/"),format=c("graphml"))
identify.targets(AN,betweenness,2,131,20,343434)
identify.targets(ZN,eigen_centrality,23,27,3,2242020)
identify.targets.size<-function(network,test,length,seed){
long.targets<-give.nodelists(test,network,length)
layout.t3<-layout.auto(network)
set.seed(seed)
V(network)$color="yellow"
V(network)$size=test(network)
plot(network)
}
identify.targets.size(ZN,betweenness,
identify.targets(ZN,betweenness,2,27,3,333333)
identify.targets(ZN,betweenness,2,27,3,333333)
identify.targets(ZN,betweenness,2,27,3,333333)
identify.targets.size(ZN,betweenness,27,33333)
#After messing with sizes of networks, it is important to reset size to 15
V(ZN)$size=15
V(SN)$size=15
top.node<-function(relevant.nodelist,n){
top1.t.1<-relevant.nodelist%>%top_n(n,relevant.nodelist[,1])
}
identify.targets.size(AN,betweenness,131,3435343)
identify.targets.size(ZN,betweenness,27,33333)
identify.targets.size(AN,betweenness,131,3435343)
####################### Eigenvector Centrality ###################################
# The eigenvector centrality measure is a way of quantifying the influence that a
# specific node has for example, while both of the top 2 people in terms of all
# degree (the most connected two) have many connections, if they do not share
# any common nodes but one, that one common node would be the most influential of
# that network because he influences the top two connected nodes.
#below we use the eigenvector centrality measure to help us find the most influential
#nodes in our networks
#Eigen Vector Centrality - this gives us a manipulation matrix.
ZNeigen<- eigen_centrality(ZN)
#Now we make a dataframe to analyze the values of each node
ZNeigen<-as.data.frame(ZNeigen)
#Look at dataframe to see the variation between eigen values. We can see that
#there is quite a bit of variation between the values.
# We can create a column that has the node ID next to each value
ZNeigen$Nodelist<-(1:27)
#Now we repeat with the Songbirds data
#First calculated Betweeness
SNeigen<-eigen_centrality(SN)
#Remake into a dataframe for analysis
SNeigen<-as.data.frame(SNeigen)
# We can create a column that has their node ID next to each value
SNeigen$Nodelist<-(1:117)
#Now we can write these into csvs for future reference
#Zebra network
write.csv(ZNeigen,file=paste(t.path,"Zebra Eigen Vetor Values.csv",sep="/"))
#Songbird network
write.csv(SNeigen,file=paste(t.path,"Songbird Eigen Vetor Values.csv",sep="/"))
#Now we can graph the eigen vector centrality to see who is most connected to
#other very connected people.
# Now that we know which players have the highest Betweeness Centrality, we can
# regraph our networks with them highlighted in a different color.
############################## Final Graphs Eigenvector ####################################
# Graphs of 1 player
#Zebra
#First we find our top 1 player as measured for Eigen Vector centrallity
top1ZNeigen<-ZNeigen%>%top_n(1,ZNeigen$vector)
#An important note is that it is our 23rd column we want
#next we highlight those players
#RESET SIZE OF NODES
V(ZN)$size=15
V(SN)$size=15
LayoutZNeigen<-layout.auto(ZN)
set.seed(2222020)
#node options
V(ZN)$color<-"grey"
V(ZN)[top1ZNeigen[,23]]$color<-"yellow"
#Now we can plot it!
plot(ZN)
#lets save this as a pdf for future reference
pdf(file=paste(t.path,"Zebra top 1 Eigen.pdf",sep="/"))
LayoutZNeigen<-layout.auto(ZN)
set.seed(2222020)
V(ZN)$color<-"grey"
V(ZN)[top1ZNeigen[,23]]$color<-"yellow"
plot(ZN)
dev.off()
# Songbird
#First we find our top player
top1SNeigen<-SNeigen%>%top_n(1,SNeigen$vector)
#An important note is that it is our second column we want
#next we highlight those players
LayoutSNeigen<-layout.auto(SN)
set.seed(2222020)
#node options
V(SN)$color<-"grey"
V(SN)[top1SNeigen[,23]]$color<-"yellow"
#Now we can plot it!
plot(SN)
#save as a pdf
pdf(file=paste(t.path,"Songbird top 1 Eigen.pdf",sep="/"))
LayoutSNeigen<-layout.auto(SN)
set.seed(2222020)
V(SN)$color<-"grey"
V(SN)[top1SNeigen[,23]]$color<-"yellow"
plot(SN)
dev.off()
# Graphs of 3% (same as 1 player for Zebra)
#Zebra
#First we find our top 3% of players
#total nodes in Zebra are 27, 3% comes out to.81,
#we round up to 1 player (same as last time)
top1ZNeigen<-ZNeigen%>%top_n(1,ZNeigen$vector)
#Again note our 23rd column is the nodelist
#next we highlight those players
LayoutZNeigen<-layout.auto(ZN)
set.seed(2222020)
V(ZN)$color<-"grey"
V(ZN)[top1ZNeigen[,23]]$color<-"yellow"
plot(ZN)
#save as a pdf
pdf(file=paste(t.path,"Zebra top 3 Eigen.pdf",sep="/"))
LayoutZNeigen<-layout.auto(ZN)
set.seed(2222020)
V(ZN)$color<-"grey"
V(ZN)[top1ZNeigen[,23]]$color<-"yellow"
plot(ZN)
dev.off()
#Songbird
#First we find our top 3% of players
#total nodes in Songbirds are 117 3% comes
#out to 3.5 we round up to 4 players
top4SNeigen<-SNeigen%>%top_n(4,SNeigen$vector)
#Again note our second column is the nodelist
#next we highlight those players
LayoutSNeigen<-layout.auto(SN)
set.seed(2222020)
V(SN)$color<-"grey"
V(SN)[top4SNeigen[,23]]$color<-"yellow"
plot(SN)
#save as pdf
pdf(file=paste(t.path,"Songbird top 3.pdf",sep="/"))
LayoutSN<-layout.auto(SN)
set.seed(2222020)
V(SN)$color<-"grey"
V(SN)[top4SN[,23]]$color<-"yellow"
plot(SN)
dev.off()
# Graphs of 10%
#Zebra
#First we find our top 10% of players
#total nodes in Zebra are 27, 10% comes out to 2.7,
#we round up to 3 players
top3ZNeigen<-ZNeigen%>%top_n(3,ZNeigen$vector)
#Again note our second column is the nodelist
#next we highlight those players
LayoutZNeigen<-layout.auto(ZN)
set.seed(2222020)
V(ZN)$color<-"grey"
V(ZN)[top3ZNeigen[,23]]$color<-"yellow"
plot(ZN)
#Here we have 4 nodes that are teh top 10 percent because there is a tie between
#2 nodes and therefore there are not 3, but 4
#Save as a pdf
pdf(file=paste(t.path,"Zebra top 10 Eigen.pdf",sep="/"))
LayoutZNeigen<-layout.auto(ZN)
set.seed(2222020)
V(ZN)$color<-"grey"
V(ZN)[top3ZNeigen[,23]]$color<-"yellow"
plot(ZN)
dev.off()
#Songbird
#First we find our top 10% of players
#total nodes in Songbirds are 117 10% comes
#out to 11.7 we round up to 12 players
top12SNeigen<-SNeigen%>%top_n(12,SNeigen$vector)
#Again note our second column is the nodelist
#next we highlight those players
LayoutSNeigen<-layout.auto(SN)
set.seed(2222020)
V(SN)$color<-"grey"
V(SN)[top12SNeigen[,23]]$color<-"yellow"
plot(SN)
#save as pdf
pdf(file=paste(t.path,"Songbird top 10 Eigen.pdf"))
LayoutSNeigen<-layout.auto(SN)
set.seed(2222020)
V(SN)$color<-"grey"
V(SN)[top12SNeigen[,23]]$color<-"yellow"
plot(SN)
dev.off()
source("3. TestingTechniques.R")
give.nodelists<-function(test,network,lengthnet1){
temp.dataframe1<-test(network)
temp.dataframe1<-as.data.frame(temp.dataframe1)
temp.dataframe1$NodeID<-(1:lengthnet1)
temp.dataframe1%>%arrange(desc(temp.dataframe1))
return(temp.dataframe1)
}
#Eigen Vector Centrality - this gives us a manipulation matrix.
ZNeigen<- eigen_centrality(ZN)
#Eigen Vector Centrality - this gives us a manipulation matrix.
ZNeigen<- eigen_centrality(ZN)
#Now we make a dataframe to analyze the values of each node
ZNeigen<-as.data.frame(ZNeigen)
#Look at dataframe to see the variation between eigen values. We can see that
#there is quite a bit of variation between the values.
# We can create a column that has the node ID next to each value
ZNeigen$Nodelist<-(1:27)
#Now we repeat with the Songbirds data
#First calculated Betweeness
SNeigen<-eigen_centrality(SN)
#Remake into a dataframe for analysis
SNeigen<-as.data.frame(SNeigen)
# We can create a column that has their node ID next to each value
SNeigen$Nodelist<-(1:117)
#Now we can write these into csvs for future reference
#Zebra network
write.csv(ZNeigen,file=paste(t.path,"Zebra Eigen Vetor Values.csv",sep="/"))
#Songbird network
write.csv(SNeigen,file=paste(t.path,"Songbird Eigen Vetor Values.csv",sep="/"))
#Now we can graph the eigen vector centrality to see who is most connected to
#other very connected people.
# Now that we know which players have the highest Betweeness Centrality, we can
#Zebra
#First we find our top 1 player as measured for Eigen Vector centrallity
top1ZNeigen<-ZNeigen%>%top_n(1,ZNeigen$vector)
#An important note is that it is our 23rd column we want
#next we highlight those players
#RESET SIZE OF NODES
V(ZN)$size=15
#Zebra
#First we find our top 1 player as measured for Eigen Vector centrallity
top1ZNeigen<-ZNeigen%>%top_n(1,ZNeigen$vector)
#First we find our top 1 player as measured for Eigen Vector centrallity
top1ZNeigen<-ZNeigen%>%top_n(1,ZNeigen$vector)
#set our layout and seed
LayoutZNeigen<-layout.auto(ZN)
set.seed(2222020)
#node options
V(ZN)$color<-"grey"
#An important note is that it is our 23rd column we want
#next we highlight those players
V(ZN)[top1ZNeigen[,23]]$color<-"yellow"
#Now we can plot it!
plot(ZN)
pdf(file=paste(t.path,"Zebra top 1 Eigen.pdf",sep="/"))
LayoutZNeigen<-layout.auto(ZN)
set.seed(2222020)
V(ZN)$color<-"grey"
V(ZN)[top1ZNeigen[,23]]$color<-"yellow"
plot(ZN)
dev.off()
# Songbird
#First we find our top player
top1SNeigen<-SNeigen%>%top_n(1,SNeigen$vector)
LayoutSNeigen<-layout.auto(SN)
#node options
V(SN)$color<-"grey"
#Now we can plot it!
plot(SN)
pdf(file=paste(t.path,"Songbird top 1 Eigen.pdf",sep="/"))
LayoutSNeigen<-layout.auto(SN)
set.seed(2222020)
V(SN)$color<-"grey"
V(SN)[top1SNeigen[,23]]$color<-"yellow"
plot(SN)
dev.off()
#Zebra
#First we find our top 3% of players
#total nodes in Zebra are 27, 3% comes out to.81,
#we round up to 1 player (same as last time)
top1ZNeigen<-ZNeigen%>%top_n(1,ZNeigen$vector)
#Again note our 23rd column is the nodelist
#next we highlight those players
LayoutZNeigen<-layout.auto(ZN)
top4SNeigen<-SNeigen%>%top_n(4,SNeigen$vector)
LayoutSNeigen<-layout.auto(SN)
set.seed(2222020)
V(SN)$color<-"grey"
V(SN)[top4SNeigen[,23]]$color<-"yellow"
plot(SN)
#save as pdf
pdf(file=paste(t.path,"Songbird top 3.pdf",sep="/"))
LayoutSN<-layout.auto(SN)
set.seed(2222020)
V(SN)$color<-"grey"
V(SN)[top4SNeigen[,23]]$color<-"yellow"
plot(SN)
dev.off()
#save as pdf
pdf(file=paste(t.path,"Songbird top 3 Eigen.pdf",sep="/"))
LayoutSN<-layout.auto(SN)
set.seed(2222020)
V(SN)$color<-"grey"
V(SN)[top4SNeigen[,23]]$color<-"yellow"
plot(SN)
dev.off()
pdf(file=paste(t.path,"Songbird top 3 Eigen.pdf",sep="/"))
LayoutSN<-layout.auto(SN)
set.seed(2222020)
V(SN)$color<-"grey"
V(SN)[top4SNeigen[,23]]$color<-"yellow"
plot(SN)
dev.off()
#Zebra
#First we find our top 10% of players
#total nodes in Zebra are 27, 10% comes out to 2.7,
#we round up to 3 players
top3ZNeigen<-ZNeigen%>%top_n(3,ZNeigen$vector)
pdf(file=paste(t.path,"Songbird top 3 Eigen.pdf",sep="/"))
LayoutSN<-layout.auto(SN)
set.seed(2222020)
V(SN)$color<-"grey"
V(SN)[top4SNeigen[,23]]$color<-"yellow"
plot(SN)
dev.off()
top3ZNeigen<-ZNeigen%>%top_n(3,ZNeigen$vector)
LayoutZNeigen<-layout.auto(ZN)
set.seed(2222020)
V(ZN)$color<-"grey"
V(ZN)[top3ZNeigen[,23]]$color<-"yellow"
plot(ZN)
top3ZNeigen
################################################################################
#                              MAIN SCRIPT                                     #
################################################################################
#----------------------------TABLE OF CONTENTS----------------------------------
# - Overview
# - Packages downloaded
# - Libraries
# - Data Download
# - Workflow
# - Source the rest of the code
################################################################################
#---------------------------------OVERVIEW--------------------------------------
#The following contents within this main directory include the packages,
#libraries, dataset and the workflow that is used in this analysis. For the
#purpose of this analysis the scripts should be run in the folling order to gain
#replicatory results:
#    1. MainScript:(This included data organization with the overview of the
#                   workflow used in this project)
#
#    2. LearningTechniques: (This includes the dataset we used and the analyses
#                           that we ran to produce the graphs and numerical values)
#
#
#    3. PracticingTechniques: (This includes our creation of our own dataset and
#                              the analyses we used on this dataset)
#
#    4. TestingTechniques: (This includes the analyses we ran on a dataset
#                           provided to us)
#------------------------------PACKAGE DOWNLOAD---------------------------------
# This is a list of the package used for these analyses
if(!require(igraph)){
install.packages("igraph")
}
if(!require(readr)){
install.packages("readr")
}
if(!require(haven)){
install.packages("haven")
}
if(!require(ggplot2)){
install.packages("ggplot2")
}
if(!require(dplyr)){
install.packages("dplyr")
}
#---------------------------------LIBRARIES-------------------------------------
# Load the packages in the libraries
#load libraries
library(igraph)
library(readr)
library(haven)
library(ggplot2)
library(dplyr)
#------------------------------BUILD DIRECTORY----------------------------------
#Set our working directory
working.dir <- getwd()
# Create the folders we will use
output.folders <- c("1.Learn.tech","2.Pract.tech","3.Test.tech", "4. Data.sets","5.Final.tech")
# Check to see if the folders exist in the working directory and if they don't,
# use the following loop.
# The following loop checks the output.folders list and checks to see
# if the folders exist in the working directory. If they don't it will create
# them.
# Make the folders using this loop code
for(i in 1:length(output.folders))
if(file.exists(output.folders[i]) == FALSE)
dir.create(output.folders[i])
#-------- Pathways----------
# The following is a directory of the pathways to each of our output folders
# Path to 1.Learn.tech
l.path <- paste(working.dir,"/",output.folders[1], "/", sep="")
# Path to 2.Pract.tech
p.path <- paste(working.dir,"/",output.folders[2], "/", sep="")
# Path to 3.Test.tech
t.path <- paste(working.dir,"/",output.folders[3], "/", sep="")
# Path to 4.Data.Set
d.path <- paste(working.dir,"/",output.folders[4], "/", sep="")
# Path to 5.Final.tech
f.path <- paste(working.dir,"/",output.folders[5], "/", sep="")
#--------------------------------DATA DOWLOAD-----------------------------------
# The following are the raw data files used in the practicing techniques section
# of this analysis which was found from a youtube channel
#https://www.youtube.com/watch?v=XNw-DZFsFYA&list=PL1M5TsfDV6Vs7tnHGNgowEUwJW-O8QVp5&index=4&fbclid=IwAR0tI0OQna4jte30rqZTZJLHdiiA49viGI2gB6xOnoJ1m_DwXfpT3zcZcpo
CN_edgelist <- read.csv(paste(d.path,"ColleaugueNetwork.csv", sep = "/"))
DN_edgelist <- read.csv(paste(d.path,"DiscussionNetwork.csv", sep = "/"))
CNA <- read.csv(paste(d.path,"ColleaugueAttributes.csv", sep = "/"))
DNA <- read.csv(paste(d.path,"DiscussionAttributes.csv", sep = "/"))
#The following are the datasets we used for the testing techniques section of
#this analysis. We retrieved this data from
#https://github.com/jdm286/Animal-Social-Structure-Network-Repository?fbclid=IwAR1_6eLcJ5Kivlzyn_E7b3cpY_NNSNTdC4M2hbW5Oqt0Juq9yhicKd5xtuw
#This next dataset is our Songbird Social network
SN <- read_graph(paste(d.path,"weighted_network_social_songbird.graphml",
sep="/"),format=c("graphml"))
#This next dataset is our Zebra Social network
ZN <-read_graph(paste(d.path,"UNweighted_zebra_interaction.graphml",
sep="/"),format=c("graphml"))
#-----------------------------------WORKFLOW------------------------------------
# In our working directory we created 4 pathways to different folders with
# specific outputs
#           - 1. Learn.tech  -> the path to this folder is: l.path
#                 (This folder contains the outputs we produced from learning
#                  these social analysis techniques)
#
#           - 2. Pract.tech -> the path to this folder is: p.path
#                 (This folder contains the outputs we produced from our test
#                 dataset)
#
#           - 3. Test.tech -> the path to this folder is: t.path
#                 (This folder contains the outputs we produced from our real
#                 dataset)
#
#           - 4. Data.sets -> th path to this folder is d.path
#                 (This folder contains the raw data used in both our learning
#                 techniques and our testing techniques sections)
#-----------Source the other scripts-----------
source("1. LearningTechniques.R")
source("2. PracticingTechniques.R")
source("3. TestingTechniques.R")
#################################END MAIN SCRIPT################################
vcount(SN)
immunize.targets<-function(network,number.of.targets){
VN<-vcount(network)
long.targets<- give.nodelists(betweenness,network,VN)
final.targes<- top.node(long.targets,number.of.targets)
layout.t2<-layout.auto(network)
set.seed(seed)
V(network)$color="grey"
V(network)[final.targets[,2]]$color<-"yellow"
V(network)$size=15
plot(network)
}
immunize.targets(AN,12)
immunize.targets<-function(network,number.of.targets){
VN<-vcount(network)
long.targets<- give.nodelists(betweenness,network,VN)
final.targes<- top.node(long.targets,number.of.targets)
layout.t2<-layout.auto(network)
set.seed(1234)
V(network)$color="grey"
V(network)[final.targets[,2]]$color<-"yellow"
V(network)$size=15
plot(network)
}
immunize.targets(AN,12)
immunize.targets<-function(network,number.of.targets){
VN<-vcount(network)
long.targets<- give.nodelists(betweenness,network,VN)
final.targets<- top.node(long.targets,number.of.targets)
layout.t2<-layout.auto(network)
set.seed(1234)
V(network)$color="grey"
V(network)[final.targets[,2]]$color<-"yellow"
V(network)$size=15
plot(network)
}
immunize.targets(AN,12)
immunize.targets(AN,12)
ghfhg<-immunize.targets(AN,12)
plot(ghfhg)
rm(ghfhg)
immunize.targets<-function(network,number.of.targets){
VN<-vcount(network)
long.targets<- give.nodelists(betweenness,network,VN)
final.targets<- top.node(long.targets,number.of.targets)
layout.t2<-layout.auto(network)
set.seed(1234)
V(network)$color="grey"
V(network)[final.targets[,2]]$color<-"yellow"
V(network)$size=15
plot(network)
return(plot(network))
}
immunize.targets(AN,12)
plot(AN)
plot(AN)
plot(AN)
immunize.targets(AN,12)
plot(AN)
plot(ZN)
plot(SN)
plot(ZN)
