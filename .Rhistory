#the graph
plot(DN_graph2, edge.arrow.size=0.25,edge.arrow.mode = "-", vertex.label = NA)
set.seed(3952)  # set seed to make the layout reproducible
layout1 <- layout.fruchterman.reingold(DN_graph2,niter=500)
#Node or Vetex Options: Size and Color
V(DN_graph2)$size=(eigen_centrality(DN_graph2)/5)#because of the wide range
#WARNING, and error shows up, we cannot get it to go away, but it doesn't prevent
#the graph from showing up, and we believe it still does
V(DN_graph2)$color <- ifelse(DNA[V(DN_graph2), 2] == "Researcher", "blue", "red")
#Edge Options: Color
E(DN_graph2)$color <- "grey"
#Plotting, Now Specifying an arrow size and getting rid of arrow heads
#We are letting the color and the size of the node indicate the directed nature of
#the graph
plot(DN_graph2, edge.arrow.size=0.25,edge.arrow.mode = "-", vertex.label = NA)
set.seed(3952)  # set seed to make the layout reproducible
layout1 <- layout.fruchterman.reingold(DN_graph2,niter=500)
#Node or Vetex Options: Size and Color
V(DN_graph2)$size=(eigen_centrality(DN_graph2)/5)#because of the wide range
#WARNING, and error shows up, we cannot get it to go away, but it doesn't prevent
#the graph from showing up, and we believe it still does
V(DN_graph2)$color <- ifelse(DNA[V(DN_graph2), 2] == "Researcher", "blue", "red")
#Edge Options: Color
E(DN_graph2)$color <- "grey"
#Plotting, Now Specifying an arrow size and getting rid of arrow heads
#We are letting the color and the size of the node indicate the directed nature of
#the graph
plot(DN_graph2, edge.arrow.size=0.25,edge.arrow.mode = "-", vertex.label = NA)
set.seed(3952)  # set seed to make the layout reproducible
layout1 <- layout.fruchterman.reingold(DN_graph2,niter=500)
#Node or Vetex Options: Size and Color
V(DN_graph2)$size=(eigen_centrality(DN_graph2)/5)#because of the wide range
#WARNING, and error shows up, we cannot get it to go away, but it doesn't prevent
#the graph from showing up, and we believe it still does
V(DN_graph2)$color <- ifelse(DNA[V(DN_graph2), 2] == "Researcher", "blue", "red")
#Edge Options: Color
E(DN_graph2)$color <- "grey"
#Plotting, Now Specifying an arrow size and getting rid of arrow heads
#We are letting the color and the size of the node indicate the directed nature of
#the graph
plot(DN_graph2, edge.arrow.size=0.25,edge.arrow.mode = "-", vertex.label = NA)
set.seed(3952)  # set seed to make the layout reproducible
layout1 <- layout.fruchterman.reingold(DN_graph2,niter=500)
#Node or Vetex Options: Size and Color
V(DN_graph2)$size=(eigen_centrality(DN_graph2)/5)#because of the wide range
#WARNING, and error shows up, we cannot get it to go away, but it doesn't prevent
#the graph from showing up, and we believe it still does
V(DN_graph2)$color <- ifelse(DNA[V(DN_graph2), 2] == "Researcher", "blue", "red")
#Edge Options: Color
E(DN_graph2)$color <- "grey"
#Plotting, Now Specifying an arrow size and getting rid of arrow heads
#We are letting the color and the size of the node indicate the directed nature of
#the graph
plot(DN_graph2, edge.arrow.size=0.25,edge.arrow.mode = "-", vertex.label = NA)
set.seed(3952)  # set seed to make the layout reproducible
layout1 <- layout.fruchterman.reingold(DN_graph2,niter=500)
#Node or Vetex Options: Size and Color
V(DN_graph2)$size=(eigen_centrality(DN_graph)/5)#because of the wide range
#WARNING, and error shows up, we cannot get it to go away, but it doesn't prevent
#the graph from showing up, and we believe it still does
V(DN_graph2)$color <- ifelse(DNA[V(DN_graph2), 2] == "Researcher", "blue", "red")
#Edge Options: Color
E(DN_graph2)$color <- "grey"
#Plotting, Now Specifying an arrow size and getting rid of arrow heads
#We are letting the color and the size of the node indicate the directed nature of
#the graph
plot(DN_graph2, edge.arrow.size=0.25,edge.arrow.mode = "-", vertex.label = NA)
set.seed(3952)  # set seed to make the layout reproducible
layout1 <- layout.fruchterman.reingold(DN_graph2,niter=500)
#Node or Vetex Options: Size and Color
V(DN_graph2)$size=(eigen_centrality(DN_graph)/5)#because of the wide range
#WARNING, and error shows up, we cannot get it to go away, but it doesn't prevent
#the graph from showing up, and we believe it still does
V(DN_graph2)$color <- ifelse(DNA[V(DN_graph2), 2] == "Researcher", "blue", "red")
#Edge Options: Color
E(DN_graph2)$color <- "grey"
#Plotting, Now Specifying an arrow size and getting rid of arrow heads
#We are letting the color and the size of the node indicate the directed nature of
#the graph
plot(DN_graph2, edge.arrow.size=0.25,edge.arrow.mode = "-", vertex.label = NA)
set.seed(3952)  # set seed to make the layout reproducible
layout1 <- layout.fruchterman.reingold(DN_graph2,niter=500)
#Node or Vetex Options: Size and Color
V(DN_graph2)$size=(eigen_centrality(DN_graph)/5)#because of the wide range
#WARNING, and error shows up, we cannot get it to go away, but it doesn't prevent
#the graph from showing up, and we believe it still does
V(DN_graph2)$color <- ifelse(DNA[V(DN_graph2), 2] == "Researcher", "blue", "red")
#Edge Options: Color
E(DN_graph2)$color <- "grey"
#Plotting, Now Specifying an arrow size and getting rid of arrow heads
#We are letting the color and the size of the node indicate the directed nature of
#the graph
plot(DN_graph2, edge.arrow.size=0.25,edge.arrow.mode = "-", vertex.label = NA)
#Layout Options
set.seed(3952)  # set seed to make the layout reproducible
layout1 <- layout.fruchterman.reingold(DN_graph2,niter=500)
#Node or Vetex Options: Size and Color
V(DN_graph2)$size=(eigen_centrality(DN_graph2)/5) #because of the wide range
V(DN_graph2)$color <- ifelse(DNA[V(DN_graph2), 2] == "Researcher", "blue", "red")
#Edge Options: Color
E(DN_graph2)$color <- "grey"
#Plotting, Now Specifying an arrow size and getting rid of arrow heads
#We are letting the color and the size of the node indicate the directed nature of
#the graph
plot(DN_graph2, edge.arrow.size=0.25,edge.arrow.mode = "-", vertex.label = NA)
#Layout Options
set.seed(3952)  # set seed to make the layout reproducible
layout1 <- layout.fruchterman.reingold(DN_graph2,niter=500)
#Node or Vetex Options: Size and Color
V(DN_graph2)$size=(eigen_centrality(DN_graph2)/5) #because of the wide range
V(DN_graph2)$color <- ifelse(DNA[V(DN_graph2), 2] == "Researcher", "blue", "red")
#Edge Options: Color
E(DN_graph2)$color <- "grey"
#Plotting, Now Specifying an arrow size and getting rid of arrow heads
#We are letting the color and the size of the node indicate the directed nature of
#the graph
plot(DN_graph2, edge.arrow.size=0.25,edge.arrow.mode = "-", vertex.label = NA)
#Eigen Vector Centrality - this gives us a manipulation matrix.
ZNeigen<- eigen_centrality(ZN)
#Now we make a dataframe to analyze the values of each node
ZNeigen<-as.data.frame(ZNeigen)
# We can create a column that has the node ID next to each value
ZNeigen$Nodelist<-(1:27)
#Now we repeat with the Songbirds data
#First calculated Betweeness
SNeigen<-eigen_centrality(SN)
#Remake into a dataframe for analysis
SNeigen<-as.data.frame(SNeigen)
# We can create a column that has their node ID next to each value
SNeigen$Nodelist<-(1:117)
#Zebra network
write.csv(ZNeigen,file=paste(t.path,"Zebra Eigen Vetor Values.csv",sep="/"))
#Songbird network
write.csv(SNeigen,file=paste(t.path,"Songbird Eigen Vetor Values.csv",sep="/"))
#Zebra
#First we find our top 1 player as measured for Eigen Vector centrallity
top1ZNeigen<-ZNeigen%>%top_n(1,ZNeigen$vector)
LayoutZNeigen<-layout.auto(ZN)
set.seed(2222020)
set.seed(2222020)
#node options
V(ZN)$color<-"grey"
V(ZN)[top1ZNeigen[,23]]$color<-"yellow"
#Now we can plot it!
plot(ZN)
#lets save this as a pdf for future reference
pdf(file=paste(t.path,"Zebra top 1 Eigen.pdf",sep="/"))
LayoutZNeigen<-layout.auto(ZN)
set.seed(2222020)
V(ZN)$color<-"grey"
V(ZN)[top1ZNeigen[,23]]$color<-"yellow"
plot(ZN)
dev.off()
#Zebra
#First we find our top 3% of players
#total nodes in Zebra are 27, 3% comes out to.81,
#we round up to 1 player (same as last time)
top1ZNeigen<-ZNeigenn%>%top_n(1,ZNeigen$vector)
# We can create a column that has the node ID next to each value
ZNeigen$Nodelist<-(1:27)
#Eigen Vector Centrality - this gives us a manipulation matrix.
ZNeigen<- eigen_centrality(ZN)
#Now we make a dataframe to analyze the values of each node
ZNeigen<-as.data.frame(ZNeigen)
# We can create a column that has the node ID next to each value
ZNeigen$Nodelist<-(1:27)
ZNeigen
#Now we repeat with the Songbirds data
#First calculated Betweeness
SNeigen<-eigen_centrality(SN)
#Remake into a dataframe for analysis
SNeigen<-as.data.frame(SNeigen)
# We can create a column that has their node ID next to each value
SNeigen$Nodelist<-(1:117)
#Zebra
#First we find our top 1 player as measured for Eigen Vector centrallity
top1ZNeigen<-ZNeigen%>%top_n(1,ZNeigen$vector)
LayoutZNeigen<-layout.auto(ZN)
set.seed(2222020)
#node options
V(ZN)$color<-"grey"
V(ZN)[top1ZNeigen[,23]]$color<-"yellow"
#Now we can plot it!
plot(ZN)
top1SNeigen<-ZNeigen%>%top_n(1,SNeigen$vector)
#An important note is that it is our second column we want
#next we highlight those players
LayoutSNeigen<-layout.auto(SN)
set.seed(2222020)
#node options
V(SN)$color<-"grey"
V(SN)[top1ZNeigen[,23]]$color<-"yellow"
#Now we can plot it!
plot(SN)
LayoutSNeigen<-layout.auto(SN)
set.seed(2222020)
V(SN)$color<-"grey"
V(SN)[top1SNeigen[,23]]$color<-"yellow"
plot(SN)
# Songbird
#First we find our top player
top1SNeigen<-SNeigen%>%top_n(1,SNeigen$vector)
source('~/R/Final-Project/Test.Tech2.R', echo=TRUE)
#Eigen Vector Centrality - this gives us a manipulation matrix.
ZNeigen<- eigen_centrality(ZN)
#Now we make a dataframe to analyze the values of each node
ZNeigen<-as.data.frame(ZNeigen)
#Look at dataframe to see the variation between eigen values. We can see that
#there is quite a bit of variation between the values.
# We can create a column that has the node ID next to each value
ZNeigen$Nodelist<-(1:27)
SNeigen<-eigen_centrality(SN)
#Remake into a dataframe for analysis
SNeigen<-as.data.frame(SNeigen)
# We can create a column that has their node ID next to each value
SNeigen$Nodelist<-(1:117)
#Now we can write these into csvs for future reference
#Zebra
#First we find our top 1 player as measured for Eigen Vector centrallity
top1ZNeigen<-ZNeigen%>%top_n(1,ZNeigen$vector)
# Songbird
#First we find our top player
top1SNeigen<-SNeigen%>%top_n(1,SNeigen$vector)
LayoutSNeigen<-layout.auto(SN)
set.seed(2222020)
#node options
V(SN)$color<-"grey"
V(SN)[top1SNeigen[,23]]$color<-"yellow"
#Now we can plot it!
plot(SN)
LayoutSNeigen<-layout.auto(SN)
set.seed(2222020)
V(SN)$color<-"grey"
V(SN)[top1SNeigen[,23]]$color<-"yellow"
plot(SN)
#node options
V(SN)$color<-"grey"
V(SN)[top1SNeigen[,23]]$color<-"yellow"
#Now we can plot it!
plot(SN)
#Now we can plot it!
plot(ZN)
#Now we can plot it!
plot(ZN)
#lets save this as a pdf for future reference
pdf(file=paste(t.path,"Zebra top 1 Eigen.pdf",sep="/"))
LayoutZNeigen<-layout.auto(ZN)
set.seed(2222020)
pdf(file=paste(t.path,"Zebra top 1 Eigen.pdf",sep="/"))
LayoutZNeigen<-layout.auto(ZN)
set.seed(2222020)
V(ZN)$color<-"grey"
V(ZN)[top1ZNeigen[,23]]$color<-"yellow"
plot(ZN)
dev.off()
#Now we can plot it!
plot(ZN)
#Now we can plot it!
plot(ZN)
#Now we can plot it!
plot(ZN)
#Now we can plot it!
plot(ZN)
#node options
V(ZN)$color<-"grey"
V(ZN)[top1ZNeigen[,23]]$color<-"yellow"
#Now we can plot it!
plot(ZN)
LayoutZNeigen<-layout.auto(ZN)
set.seed(2222020)
#node options
V(ZN)$color<-"grey"
V(ZN)[top1ZNeigen[,23]]$color<-"yellow"
#Now we can plot it!
plot(ZN)
#An important note is that it is our second column we want
#next we highlight those players
V(ZN)$size=15
LayoutZNeigen<-layout.auto(ZN)
set.seed(2222020)
#node options
V(ZN)$color<-"grey"
V(ZN)[top1ZNeigen[,23]]$color<-"yellow"
#Now we can plot it!
plot(ZN)
LayoutZNeigen<-layout.auto(ZN)
set.seed(2222020)
#node options
V(ZN)$color<-"grey"
V(ZN)[top1ZNeigen[,23]]$color<-"yellow"
#Now we can plot it!
plot(ZN)
V(SN)$size=15
LayoutSNeigen<-layout.auto(SN)
set.seed(2222020)
#node options
V(SN)$color<-"grey"
V(SN)[top1SNeigen[,23]]$color<-"yellow"
#Now we can plot it!
plot(SN)
LayoutZNeigen<-layout.auto(ZN)
set.seed(2222020)
#node options
V(ZN)$color<-"grey"
V(ZN)[top1ZNeigen[,23]]$color<-"yellow"
#Now we can plot it!
plot(ZN)
#lets save this as a pdf for future reference
pdf(file=paste(t.path,"Zebra top 1 Eigen.pdf",sep="/"))
LayoutZNeigen<-layout.auto(ZN)
set.seed(2222020)
V(ZN)$color<-"grey"
V(ZN)[top1ZNeigen[,23]]$color<-"yellow"
plot(ZN)
dev.off()
#save as a pdf
pdf(file=paste(t.path,"Songbird top 1 Eigen.pdf",sep="/"))
LayoutSNeigen<-layout.auto(SN)
set.seed(2222020)
V(SN)$color<-"grey"
V(SN)[top1SNeigen[,23]]$color<-"yellow"
plot(SN)
dev.off()
#save as a pdf
pdf(file=paste(t.path,"Songbird top 1 Eigen.pdf",sep="/"))
LayoutSNeigen<-layout.auto(SN)
set.seed(2222020)
V(SN)$color<-"grey"
V(SN)[top1SNeigen[,23]]$color<-"yellow"
plot(SN)
dev.off()
#save as a pdf
pdf(file=paste(t.path,"Zebra top 3 Eigen.pdf",sep="/"))
LayoutZNeigen<-layout.auto(ZN)
set.seed(2222020)
V(ZN)$color<-"grey"
V(ZN)[top1ZNeigen[,23]]$color<-"yellow"
plot(ZN)
dev.off()
top4SNeigen<-SNeigen%>%top_n(4,SNeigen$vector)
#Again note our second column is the nodelist
#next we highlight those players
LayoutSNeigen<-layout.auto(SN)
set.seed(2222020)
V(SN)$color<-"grey"
V(SN)[top4SNeigen[,23]]$color<-"yellow"
plot(SN)
#Zebra
#First we find our top 3% of players
#total nodes in Zebra are 27, 3% comes out to.81,
#we round up to 1 player (same as last time)
top1ZNeigen<-ZNeigenn%>%top_n(1,ZNeigen$vector)
#Zebra
#First we find our top 3% of players
#total nodes in Zebra are 27, 3% comes out to.81,
#we round up to 1 player (same as last time)
top1ZNeigen<-ZNeigen%>%top_n(1,ZNeigen$vector)
pdf(file=paste(t.path,"Zebra top 3 Eigen.pdf",sep="/"))
LayoutZNeigen<-layout.auto(ZN)
set.seed(2222020)
V(ZN)$color<-"grey"
V(ZN)[top1ZNeigen[,23]]$color<-"yellow"
plot(ZN)
dev.off()
top4SNeigen<-SNeigen%>%top_n(4,SNeigen$vector)
#Again note our second column is the nodelist
#next we highlight those players
LayoutSNeigen<-layout.auto(SN)
set.seed(2222020)
V(SN)$color<-"grey"
V(SN)[top4SNeigen[,23]]$color<-"yellow"
plot(SN)
#save as pdf
pdf(file=paste(t.path,"Songbird top 3.pdf",sep="/"))
LayoutSN<-layout.auto(SN)
set.seed(2222020)
V(SN)$color<-"grey"
V(SN)[top4SN[,23]]$color<-"yellow"
plot(SN)
dev.off()
#Zebra
#First we find our top 10% of players
#total nodes in Zebra are 27, 10% comes out to 2.7,
#we round up to 3 players
top3ZNeigen<-ZNeigen%>%top_n(3,ZNeigen$vector)
#Again note our second column is the nodelist
#next we highlight those players
LayoutZNeigen<-layout.auto(ZN)
set.seed(2222020)
V(ZN)$color<-"grey"
V(ZN)[top3ZNeigen[,23]]$color<-"yellow"
plot(ZN)
pdf(file=paste(t.path,"Zebra top 10 Eigen.pdf",sep="/"))
LayoutZNeigen<-layout.auto(ZN)
set.seed(2222020)
V(ZN)$color<-"grey"
V(ZN)[top3ZNeigen[,23]]$color<-"yellow"
plot(ZN)
dev.off()
top12SNeigen<-SNeigen%>%top_n(12,SNeigen$vector)
LayoutSNeigen<-layout.auto(SN)
set.seed(2222020)
V(SN)$color<-"grey"
V(SN)[top12SNeigen[,23]]$color<-"yellow"
plot(SN)
pdf(file=paste(t.path,"Songbird top 10 Eigen.pdf"))
LayoutSNeigen<-layout.auto(SN)
set.seed(2222020)
V(SN)$color<-"grey"
V(SN)[top12SNeigen[,23]]$color<-"yellow"
plot(SN)
dev.off()
identify.targets(ZN,eigen_centrality,23,27,3,2242020)
identify.targets(ZN,eigen_centrality,23,27,3,2242020)
identify.targets(ZN,eigen_centrality,23,27,3,2242020)
#lets try it with a new network:
#here is an ant colony
AN <-read_graph("C:\Users\nickpc\Documents\R\Final-Project\4. Data.sets\weighted_network_ant_Lauren_colony2_day2.graphml",format=c("graphml"))
#lets try it with a new network:
#here is an ant colony
AN <-read_graph(paste(d.path,"weighted_network_ant_Lauren_colony2_day2.graphml",
sep="/"),format=c("graphml"))
#lets try it with a new network:
#here is an ant colony
AN <-read_graph(paste(d.path,"weighted_network_ant_Lauren_colony2_day2.graphml",
sep="/"),format=c("graphml"))
#lets try it with a new network:
#here is an ant colony
AN <-read_graph(paste(d.path,"weighted_network_ant_Lauren_colony2_day2.graphml",
sep="/"),format=c("graphml"))
#lets try it with a new network:
#here is an ant colony
AN <-read_graph(paste(d.path,"weighted_network_col2_day11.graphml",
sep="/"),format=c("graphml"))
identify.targets(AN,betweenness,2,131,10,343434)
#YES I CAN!!!
identify.targets(SN,betweenness,2,117,25,34554)
#YES I CAN!!!
identify.targets(SN,betweenness,2,117,3,34554)
identify.targets(AN,betweenness,2,131,10,343434)
#This next dataset is our Songbird Social network
SN <- read_graph(paste(d.path,"weighted_network_social_songbird.graphml",
sep="/"),format=c("graphml"))
plot(ZN)
#This next dataset is our Zebra Social network
ZN <-read_graph(paste(d.path,"UNweighted_zebra_interaction.graphml",
sep="/"),format=c("graphml"))
plot(ZN)
identify.targets(ZN,betweenness,2,27,3,333333)
#lets try it with a new network:
#here is an ant colony
AN <-read_graph(paste(d.path,"weighted_network_c0ol2_day11.graphml",
sep="/"),format=c("graphml"))
identify.targets(AN,betweenness,2,131,10,343434)
identify.targets(AN,betweenness,2,131,20,343434)
identify.targets.size<-function(network,test,node.ID.column.number, #input:network, test you want to run,
#which column in the dataframe the ID is
length,number.of.targets,seed){     ##of nodes, #of targets, and a seed for
#reproducibility
long.targets<-give.nodelists(test,network,length)            #use our give.nodelist function
final.targets<-top.node(long.targets,number.of.targets)      #use out top.node to find the right ones
layout.t3<-layout.auto(network)                              #it is important to use auto because we can use a
#far greater range of networks and tests
set.seed(seed)                                               #the seed is purely for reproducibility
V(network)$color="grey"                                      #we want a dull color for the rest of them
V(network)$size=betweenness(network)
plot(network)                                                #and finally we plot our network
}
identify.targets.size<-function(network,test,length,seed){     ##of nodes, #of targets, and a seed for
#reproducibility
long.targets<-give.nodelists(test,network,length)            #use our give.nodelist function
layout.t3<-layout.auto(network)                              #it is important to use auto because we can use a
#far greater range of networks and tests
set.seed(seed)                                               #the seed is purely for reproducibility
V(network)$color="grey"                                      #we want a dull color for the rest of them
V(network)$size=betweenness(network)
plot(network)                                                #and finally we plot our network
}
identify.targets.size<-function(network,test,length,seed){     ##of nodes, #of targets, and a seed for
#reproducibility
long.targets<-give.nodelists(test,network,length)            #use our give.nodelist function
layout.t3<-layout.auto(network)                              #it is important to use auto because we can use a
#far greater range of networks and tests
set.seed(seed)                                               #the seed is purely for reproducibility
V(network)$color="yellow"                                      #we want a dull color for the rest of them
V(network)$size=betweenness(network)
plot(network)                                                #and finally we plot our network
}
#This next dataset is our Songbird Social network
SN <- read_graph(paste(d.path,"weighted_network_social_songbird.graphml",
sep="/"),format=c("graphml"))
#This next dataset is our Zebra Social network
ZN <-read_graph(paste(d.path,"UNweighted_zebra_interaction.graphml",
sep="/"),format=c("graphml"))
plot(ZN)
plot(SN)
plot(ZN)
#YES I CAN!!!
identify.targets(ZN,betweenness,2,27,8,34554)
#YES I CAN!!!
identify.targets(ZN,betweenness,2,27,1,34554)
#YES I CAN!!!
identify.targets(ZN,betweenness,2,27,2,34554)
#YES I CAN!!!
identify.targets(ZN,betweenness,2,27,3,34554)
#YES I CAN!!!
identify.targets(ZN,betweenness,2,27,4,34554)
#This next dataset is our Zebra Social network
ZN <-read_graph(paste(d.path,"UNweighted_zebra_interaction.graphml",
sep="/"),format=c("graphml"))
ZN
View(ZN)
