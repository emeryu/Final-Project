# This is a list of the package used for these analyses
?if
# This is a list of the package used for these analyses
?if
# Load the packages in the libraries
#load libraries
library(igraph)
library(readr)
library(haven)
library(ggplot2)
library(dplyr)
#--------------------------------DATA DOWLOAD-----------------------------------
#Set our working directory
working.dir <- getwd()
# The following are the raw data files used in the practicing techniques section
# of this analysis which was found from a youtube channel
#https://www.youtube.com/watch?v=XNw-DZFsFYA&list=PL1M5TsfDV6Vs7tnHGNgowEUwJW-O8QVp5&index=4&fbclid=IwAR0tI0OQna4jte30rqZTZJLHdiiA49viGI2gB6xOnoJ1m_DwXfpT3zcZcpo
CN_edgelist <- read.csv(paste(d.path,"ColleaugueNetwork.csv", sep = "/"))
DN_edgelist <- read.csv(paste(d.path,"DiscussionNetwork.csv", sep = "/"))
CNA <- read.csv(paste(d.path,"ColleaugueAttributes.csv", sep = "/"))
DNA <- read.csv(paste(d.path,"DiscussionAttributes.csv", sep = "/"))
#The following are the datasets we used for the testing techniques section of
#this analysis. We retrieved this data from
#https://github.com/jdm286/Animal-Social-Structure-Network-Repository?fbclid=IwAR1_6eLcJ5Kivlzyn_E7b3cpY_NNSNTdC4M2hbW5Oqt0Juq9yhicKd5xtuw
#This next dataset is our Songbird Social network
SN <- read_graph(paste(d.path,"weighted_network_social_songbird.graphml",
sep="/"),format=c("graphml"))
#This next dataset is our Zebra Social network
ZN <-read_graph(paste(d.path,"UNweighted_zebra_interaction.graphml",
sep="/"),format=c("graphml"))
#-----------------------------------WORKFLOW------------------------------------
# In our working directory we created 4 pathways to different folders with
# specific outputs
#           - 1. Learn.tech  -> the path to this folder is: l.path
#                 (This folder contains the outputs we produced from learning
#                  these social analysis techniques)
#
#           - 2. Pract.tech -> the path to this folder is: p.path
#                 (This folder contains the outputs we produced from our test
#                 dataset)
#
#           - 3. Test.tech -> the path to this folder is: t.path
#                 (This folder contains the outputs we produced from our real
#                 dataset)
#
#           - 4. Data.sets -> th path to this folder is d.path
#                 (This folder contains the raw data used in both our learning
#                 techniques and our testing techniques sections)
output.folders <- c("1.Learn.tech","2.Pract.tech","3.Test.tech", "4. Data.sets")
# Check to see if the folders exist in the working directory and if they don't,
# use the following loop.
# The following loop checks the output.folders list and checks to see
# if the folders exist in the working directory. If they don't it will create
# them.
# Make the folders using this loop code
for(i in 1:length(output.folders))
if(file.exists(output.folders[i]) == FALSE)
dir.create(output.folders[i])
#-------- Pathways----------
# The following is a directory of the pathways to each of our output folders
# Path to 1.Learn.tech
l.path <- paste(working.dir,"/",output.folders[1], "/", sep="")
# Path to 2.Pract.tech
p.path <- paste(working.dir,"/",output.folders[2], "/", sep="")
# Path to 3.Test.tech
t.path <- paste(working.dir,"/",output.folders[3], "/", sep="")
# Path to 4.Data.Set
d.path<- paste(working.dir,"/",output.folders[4], "/", sep="")
#-----------Source the other scripts-----------
source("1. LearningTechniques.R")
source("2. PracticingTechniques.R")
#################################END MAIN SCRIPT################################
############################# CREATING NETWORK GRAPHS ##########################
# In our Main document, we read in our SN and ZN networks, which are Songbird
# and Zebra respectively.
# We can check that they are still loaded and ready to go by doing a simple plot
plot(ZN)
plot(SN)
#To make this a reproducible graph so we are looking at the same thing, we can
# set a seed and make a layout.
LayoutZN<-layout.auto(ZN)
set.seed(2222020)
plot(ZN)
# And again with our songbird network
LayoutSN<-layout.auto(SN)
set.seed(2222020)
plot(SN)
# We can write these graphs into PDFs for Future Reference
pdf(file=paste(t.path,"Zebra Network Initial.pdf",sep="/"))
LayoutZN<-layout.auto(ZN)
set.seed(2222020)
plot(ZN)
dev.off()
#and again for Songbirds
pdf(file=paste(t.path,"Songbird Network Initial.pdf",sep="/"))
LayoutSN<-layout.auto(SN)
set.seed(2222020)
plot(SN)
dev.off()
############################## PERFORMING ANALYSIS #######################################################
# Next we want to think about what analysis we need to run to answer our question
# Our question is, which players should be immunized to slow the spread of a
# communicable diseases in these networks? This question can be answered in many ways
# we aim to answer it assuming we can immunize:
# 1 player
# 3% of players
# and 10% of players
# The metric that seems like it is most likely to shed light on this is Betweeness
# Centrality. This metric gives us a value for each node of how often that node is
# used as a bridge between other nodes. We have a formula in our document.
# Now that we know what measure we want to use, we can begin our analysis
#First calculated Betweeness
ZNbetween<-betweenness(ZN)
#Now we make a dataframe to analyze the values of each node
ZNbetween<-as.data.frame(ZNbetween)
# We can create a column that has the node ID next to each value
ZNbetween$Nodelist<-(1:27)
# lastly we can arrange them in descending order, so we know to only highlight
# the top IDs in the final graphing portion
arrange(ZNbetween,-ZNbetween)
#Now again with Songbirds
#First calculated Betweeness
SNbetween<-betweenness(SN)
#Remake into a dataframe for analysis
SNbetween<-as.data.frame(SNbetween)
# We can create a column that has their node ID next to each value
SNbetween$Nodelist<-(1:117)
#Next we can arrange them in descending order
arrange(SNbetween,-SNbetween)
#Now we can write these into csvs for future reference
#Zebra network
write.csv(ZNbetween,file=paste(t.path,"Zebra Betweeness Values.csv",sep="/"))
#Songbird network
write.csv(SNbetween,file=paste(t.path,"Songbird Betweeness Values.csv",sep="/"))
# Below we graph who we would immunize with specific immunization criteria
############################## Final Graphs #######################################################################
# Now that we know which players have the highest Betweeness Centrality, we can
# regraph our networks with them highlighted in a different color.
# Graphs of 1 player
#Zebra
#First we find our top 1 player as measured in Betweenness
top1ZN<-ZNbetween%>%top_n(1,ZNbetween)
#An important note is that it is our second column we want
#next we highlight those players
LayoutZN<-layout.auto(ZN)
set.seed(2222020)
#node options
V(ZN)$color<-"grey"
V(ZN)[top1ZN[,2]]$color<-"yellow"
#Now we can plot it!
plot(ZN)
#lets save this as a pdf for future reference
pdf(file=paste(t.path,"Zebra top 1.pdf",sep="/"))
LayoutZN<-layout.auto(ZN)
set.seed(2222020)
V(ZN)$color<-"grey"
V(ZN)[top1ZN[,2]]$color<-"yellow"
plot(ZN)
dev.off()
# Songbird
#First we find our top player
top1SN<-SNbetween%>%top_n(1,SNbetween)
#Again note our second column is the nodelist
#next we highlight those players
LayoutSN<-layout.auto(SN)
set.seed(2222020)
V(SN)$color<-"grey"
V(SN)[top1SN[,2]]$color<-"yellow"
plot(SN)
#save as a pdf
pdf(file=paste(t.path,"Songbird top 1.pdf",sep="/"))
LayoutSN<-layout.auto(SN)
set.seed(2222020)
V(SN)$color<-"grey"
V(SN)[top1SN[,2]]$color<-"yellow"
plot(SN)
dev.off()
# Graphs of 3% (same as 1 player for Zebra)
#Zebra
#First we find our top 3% of players
#total nodes in Zebra are 27, 3% comes out to.81,
#we round up to 1 player (same as last time)
top1ZN<-ZNbetween%>%top_n(1,ZNbetween)
#Again note our second column is the nodelist
#next we highlight those players
LayoutZN<-layout.auto(ZN)
set.seed(2222020)
V(ZN)$color<-"grey"
V(ZN)[top1ZN[,2]]$color<-"yellow"
plot(ZN)
#save as a pdf
pdf(file=paste(t.path,"Zebra top 3.pdf",sep="/"))
LayoutZN<-layout.auto(ZN)
set.seed(2222020)
V(ZN)$color<-"grey"
V(ZN)[top1ZN[,2]]$color<-"yellow"
plot(ZN)
dev.off()
#Songbird
#First we find our top 3% of players
#total nodes in Songbirds are 117 3% comes
#out to 3.5 we round up to 4 players
top4SN<-SNbetween%>%top_n(4,SNbetween)
#Again note our second column is the nodelist
#next we highlight those players
LayoutSN<-layout.auto(SN)
set.seed(2222020)
V(SN)$color<-"grey"
V(SN)[top4SN[,2]]$color<-"yellow"
plot(SN)
#save as pdf
pdf(file=paste(t.path,"Songbird top 3.pdf",sep="/"))
LayoutSN<-layout.auto(SN)
set.seed(2222020)
V(SN)$color<-"grey"
V(SN)[top4SN[,2]]$color<-"yellow"
plot(SN)
dev.off()
# Graphs of 10%
#Zebra
#First we find our top 10% of players
#total nodes in Zebra are 27, 10% comes out to 2.7,
#we round up to 3 players
top3ZN<-ZNbetween%>%top_n(3,ZNbetween)
#Again note our second column is the nodelist
#next we highlight those players
LayoutZN<-layout.auto(ZN)
set.seed(2222020)
V(ZN)$color<-"grey"
V(ZN)[top3ZN[,2]]$color<-"yellow"
plot(ZN)
#Save as a pdf
pdf(file=paste(t.path,"Zebra top 10.pdf",sep="/"))
LayoutZN<-layout.auto(ZN)
set.seed(2222020)
V(ZN)$color<-"grey"
V(ZN)[top3ZN[,2]]$color<-"yellow"
plot(ZN)
dev.off()
#Songbird
#First we find our top 10% of players
#total nodes in Songbirds are 117 10% comes
#out to 11.7 we round up to 12 players
top12SN<-SNbetween%>%top_n(12,SNbetween)
#Again note our second column is the nodelist
#next we highlight those players
LayoutSN<-layout.auto(SN)
set.seed(2222020)
V(SN)$color<-"grey"
V(SN)[top12SN[,2]]$color<-"yellow"
plot(SN)
#save as pdf
pdf(file=paste(t.path,"Songbird top 10.pdf"))
LayoutSN<-layout.auto(SN)
set.seed(2222020)
V(SN)$color<-"grey"
V(SN)[top12SN[,2]]$color<-"yellow"
plot(SN)
dev.off()
################################# Additional Graphs ###############################
# Additionally we can graph this with the size of the node correlated to the betweenness value
# This could be useful if you are trying to decide how much of the population you should immunize,
# but that would require more information about the disease and how it transfers and also requires
# judgement calls on acceptable losses within the network
#Zebra betweenness by size
LayoutZN<-layout.auto(ZN)
set.seed(2222020)
V(ZN)$color<-"yellow"
V(ZN)$size=betweenness(ZN)/2# this "/2" is so some nodes dont
#swallow the whole screen when plotted
plot(ZN)
#save as pdf
pdf(file=paste(t.path,"Zebra betweenness by size.pdf",sep="/"))
LayoutZN<-layout.auto(ZN)
set.seed(2222020)
V(ZN)$color<-"yellow"
V(ZN)$size=betweenness(ZN)/2
plot(ZN)
dev.off()
#Songbird betweenness by size
LayoutSN<-layout.auto(SN)
set.seed(2222020)
V(SN)$color<-"yellow"
V(SN)$size=betweenness(SN)/45 # this "/45" is so some nodes dont
#swallow the whole screen when plotted
plot(SN)
#save as pdf
pdf(file=paste(t.path,"Songbird betweenness by size.pdf",sep="/"))
LayoutSN<-layout.auto(SN)
set.seed(2222020)
V(SN)$color<-"yellow"
V(SN)$size=betweenness(SN)/45
plot(SN)
dev.off()
################  attempts to do this with for loops and functions #####################
give.nodelists<-function(test,network1,lengthnet1){
layout.t1<-layout.auto(network1)
temp.dataframe1<-test(network1)
temp.dataframe1<-as.data.frame(temp.dataframe1)
temp.dataframe1$Nodelist<-(1:lengthnet1)
return(temp.dataframe1)
}
ZND<-give.nodelists(betweenness,ZN,27)
SND<-give.nodelists(betweenness,SN,117)
ZND<-give.nodelists(betweenness,ZN,27)
ZND
give.nodelists<-function(test,network1,lengthnet1){
layout.t1<-layout.auto(network1)
temp.dataframe1<-test(network1)
temp.dataframe1<-as.data.frame(temp.dataframe1)
temp.dataframe1$Nodelist<-(1:lengthnet1)
temp.dataframe1%>%arrange(desc(temp.dataframe1))
return(temp.dataframe1)
}
ZND<-give.nodelists(betweenness,ZN,27)
ZND
SND<-give.nodelists(betweenness,SN,117)
top.node<-function(relevant.nodelist,network){
top1.t.1<-relevant.nodelist%>%top_n(1,relevant.nodelist)
LayoutZN<-layout.auto(network)
set.seed(2222020)
V(network)$color<-"grey"
V(network)[top1.t.1[,2]]$color<-"yellow"
plot(network)
return(plot(network))
}
top.node(ZND,ZN)
top.node<-function(relevant.nodelist,network){
top1.t.1<-relevant.nodelist%>%top_n(1,relevant.nodelist)
}
top.node<-function(relevant.nodelist,network,n){
top1.t.1<-relevant.nodelist%>%top_n(n,relevant.nodelist)
}
top.node(ZND,ZN,1)
top1.t.1
top.node<-function(relevant.nodelist,n){
top1.t.1<-relevant.nodelist%>%top_n(n,relevant.nodelist)
}
top1.t.1<-ZND%>%top_n(1,ZND)
top1.t.1<-ZND%>%top_n(1,ZND)
top1.t.1<-ZND%>%top_n(1,ZND)
ZND
SNbetween
top12SN<-SNbetween%>%top_n(12,SNbetween)
top12SN
ZND%>%top_n(1,ZND)
ZND
top1.t<-ZND%>%top_n(1,ZND)
top12SN<-SNbetween%>%top_n(12,SNbetween)
str(SNbetween)
str(ZND)
top1.t<-ZND%>%top_n(1,temp.dataframe1)
top.node(ZND,1)
top.node<-function(relevant.nodelist,n){
top1.t.1<-relevant.nodelist%>%top_n(n,temp.data.frame1)
}
top.node(ZND,1)
top1.t<-ZND%>%top_n(1,temp.dataframe1)
top1.t
str(ZND)
top1.t<-ZND%>%top_n(1,ZND[,1])
top.node<-function(relevant.nodelist,n){
top1.t.1<-relevant.nodelist%>%top_n(n,relevant.nodelist[,1])
}
top.node(ZND,1)
highlight<-top.node(ZND,1)
highlight
top.node.frac<-function(relevant.nodelist,n){
topf.t.1<-relevant.nodelist%>%top_frac(n,relevant.nodelist[,1])
}
top.node.frac(ZND,3/100)
highlight3
highlight3<-top.node.frac(ZND,3/100)
highlight3
highlight3<-top.node.frac(ZND,3/100)
top.node.frac
highlight3
highlight<-top.node(ZND,1)
highlight
highlight<-top.node(SND,1)
highlight<-top.node(SND,1)
highlight
give.nodelists<-function(test,network1,lengthnet1){
layout.t1<-layout.auto(network1)
temp.dataframe1<-test(network1)
temp.dataframe1<-as.data.frame(temp.dataframe1)
temp.dataframe1$NodeID<-(1:lengthnet1)
temp.dataframe1%>%arrange(desc(temp.dataframe1))
return(temp.dataframe1)
}
ZND<-give.nodelists(betweenness,ZN,27)
SND<-give.nodelists(betweenness,SN,117)
top.node<-function(relevant.nodelist,n){
top1.t.1<-relevant.nodelist%>%top_n(n,relevant.nodelist[,1])
}
highlight<-top.node(SND,1)
highlight
identify.targets<-function(network,test,length,number.of.targets,seed){
long.targets<-give.nodelists(test,network,length)
final.targets<-top.node(long.targets,number.of.targets)
layout.t2<-layout.auto(network)
set.seed(seed)
V(network)$color="grey"
V(network)[final.targets[,2]]$color<-"yellow"
plot(network)
}
identify.targets(ZN,betweeness,27,34554)
identify.targets
identify.targets(ZN,betweeness,27,34554)
identify.targets<-function(network,test,length,number.of.targets,seed){
long.targets<-give.nodelists(test,network,length)
final.targets<-top.node(long.targets,number.of.targets)
layout.t2<-layout.auto(network)
set.seed(seed)
V(network)$color="grey"
V(network)[final.targets[,2]]$color<-"yellow"
plot(network)
}
identify.targets(ZN,betweeness,27,34554)
identify.targets<-function(network,test,length,number.of.targets,seed){
temp.dataframe1<-test(network)
temp.dataframe1<-as.data.frame(temp.dataframe1)
temp.dataframe1$NodeID<-(1:lengthnet1)
temp.dataframe1%>%arrange(desc(temp.dataframe1))
final.targets<-top.node(temp.dataframe1,number.of.targets)
layout.t2<-layout.auto(network)
set.seed(seed)
V(network)$color="grey"
V(network)[final.targets[,2]]$color<-"yellow"
plot(network)
}
identify.targets(ZN,betweeness,27,34554)
identify.targets(ZN,betweenness,27,34554)
identify.targets(ZN,betweenness,27,34554)
do.plottin.functions.work<-function(network){
layout.temp<-layout.auto(network)
plot(network)
}
do.plottin.functions.work(ZN)
identify.targets<-function(network,test,node.ID.column.number,
length,number.of.targets,seed){
long.targets<-give.nodelists(test,network,length)
final.targets<-top.node(long.targets,number.of.targets)
layout.t2<-layout.auto(network)
set.seed(seed)
V(network)$color="grey"
V(network)[final.targets[,node.ID.column.number]]$color<-"yellow"
plot(network)
}
identify.targets(ZN,betweenness,2,27,34554)
highlight<-top.node(SND,1)
top.node<-function(relevant.nodelist,n){
top1.t.1<-relevant.nodelist%>%top_n(n,relevant.nodelist$relevant.nodelist[,1])
}
highlight<-top.node(SND,1)
highlight
highlight<-top.node(SND,1)
top.node<-function(relevant.nodelist,n){
top1.t.1<-relevant.nodelist%>%top_n(n,relevant.nodelist[,1])
}
highlight<-top.node(SND,1)
highlight
identify.targets<-function(network,test,node.ID.column.number,
length,number.of.targets,seed){
long.targets<-give.nodelists(test,network,length)
final.targets<-top.node(long.targets,number.of.targets)
layout.t2<-layout.auto(network)
set.seed(seed)
V(network)$color="grey"
V(network)[final.targets[,node.ID.column.number]]$color<-"yellow"
plot(network)
}
identify.targets(ZN,betweenness,2,27,34554)
identify.targets(ZN,betweenness,2,27,1,34554)
V(ZN)$size=15
identify.targets(ZN,betweenness,2,27,1,34554)
identify.targets(ZN,betweenness,2,27,2,34554)
identify.targets(SN,betweenness,2,27,2,34554)
identify.targets(SN,betweenness,2,117,2,34554)
identify.targets(SN,betweenness,2,117,25,34554)
#YES I CAN!!!
identify.targets(SN,betweenness,2,117,25,34554)
identify.targets<-function(network,test,node.ID.column.number,
length,number.of.targets,seed){
long.targets<-give.nodelists(test,network,length)
final.targets<-top.node(long.targets,number.of.targets)
layout.t2<-layout.auto(network)
set.seed(seed)
V(network)$color="grey"
V(network)[final.targets[,node.ID.column.number]]$color<-"yellow"
plot(network)
}
#YES I CAN!!!
identify.targets(SN,betweenness,2,117,25,34554)
#YES I CAN!!!
identify.targets(SN,betweenness,2,117,25,34554)
top.node<-function(relevant.nodelist,n){
top1.t.1<-relevant.nodelist%>%top_n(n,relevant.nodelist[,1])
}
#Can I make a function that does it all??
identify.targets<-function(network,test,node.ID.column.number,
length,number.of.targets,seed){
long.targets<-give.nodelists(test,network,length)
final.targets<-top.node(long.targets,number.of.targets)
layout.t2<-layout.auto(network)
set.seed(seed)
V(network)$color="grey"
V(network)[final.targets[,node.ID.column.number]]$color<-"yellow"
plot(network)
}
#YES I CAN!!!
identify.targets(SN,betweenness,2,117,25,34554)
