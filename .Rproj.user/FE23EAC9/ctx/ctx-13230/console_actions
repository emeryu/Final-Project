{
    "data" : [
        "> ",
        "DOD<- degree(DN_graph2, mode= \"out\")",
        "> ",
        "DOD <- as.data.frame(DOD)",
        "> ",
        "",
        "> ",
        "DID<- degree(DN_graph2, mode= \"in\")",
        "> ",
        "DID <- as.data.frame(DID)",
        "> ",
        "",
        "> ",
        "#visuale to understand positionality with \"in\"",
        "> ",
        "set.seed(3256)",
        "> ",
        "layout1 <- layout.fruchterman.reingold(DN_graph2, niter= 500)",
        "> ",
        "",
        "> ",
        "#nodes size and colour",
        "> ",
        "V(DN_graph2)$size=degree(DN_graph, mode = \"in\")/5 #emphasizes distances ",
        "> ",
        "V(DN_graph2)$color <- ifelse(DNA[V(DN_graph2), 2] == \"Researcher\", \"blue\", \"red\")",
        "> ",
        "",
        "> ",
        "#Edge colour ",
        "> ",
        "E(DN_graph2)$color <- \"grey\"",
        "> ",
        "",
        "> ",
        "plot(DN_graph2,edge.arrow.size= 0.25, edge.arrow.mode= \"-\", vertex.label= NA)",
        "> ",
        "",
        "> ",
        "#visualize with \"out\"",
        "> ",
        "set.seed(3256)",
        "> ",
        "layout1 <- layout.fruchterman.reingold(DN_graph2, niter= 500)",
        "> ",
        "",
        "> ",
        "#nodes size and colour",
        "> ",
        "V(DN_graph2)$size=degree(DN_graph, mode = \"out\")/5 #emphasizes distances ",
        "> ",
        "V(DN_graph2)$color <- ifelse(DNA[V(DN_graph2), 2] == \"Researcher\", \"blue\", \"red\")",
        "> ",
        "",
        "> ",
        "#Edge colour ",
        "> ",
        "E(DN_graph2)$color <- \"grey\"",
        "> ",
        "",
        "> ",
        "plot(DN_graph2,edge.arrow.size= 0.25, edge.arrow.mode= \"-\", vertex.label= NA)",
        "> ",
        "",
        "> ",
        "#visualize with \"all\"",
        "> ",
        "",
        "> ",
        "set.seed(3256)",
        "> ",
        "layout1 <- layout.fruchterman.reingold(DN_graph2, niter= 500)",
        "> ",
        "",
        "> ",
        "#nodes size and colour",
        "> ",
        "V(DN_graph2)$size=degree(DN_graph, mode = \"all\")/5 #emphasizes distances ",
        "> ",
        "V(DN_graph2)$color <- ifelse(DNA[V(DN_graph2), 2] == \"Researcher\", \"blue\", \"red\")",
        "> ",
        "",
        "> ",
        "#Edge colour ",
        "> ",
        "E(DN_graph2)$color <- \"grey\"",
        "> ",
        "",
        "> ",
        "plot(DN_graph2,edge.arrow.size= 0.25, edge.arrow.mode= \"-\", vertex.label= NA)",
        "> ",
        "CN_edgelist<- read.csv(\"ColleaugueNetwork.csv\")",
        "Error in file(file, \"rt\") : cannot open the connection\n",
        "In addition: ",
        "Warning message:\n",
        "In file(file, \"rt\") :",
        "\n ",
        " cannot open file 'ColleaugueNetwork.csv': No such file or directory\n",
        "> ",
        "View(CNA)",
        "> ",
        "View(CNA)",
        "> ",
        "#                             LEARNING TECHNIQUES                              #       ",
        "> ",
        "",
        "> ",
        "################################################################################",
        "> ",
        "",
        "> ",
        "#-------- FORMATTING DATA FOR GRAPH CREATION ---------",
        "> ",
        "",
        "> ",
        "#We have our data depicting our colleaugue networks loaded on our mainscript. ",
        "> ",
        "#We now want to create a data frame with this data to create our graphs. ",
        "> ",
        "CN_graph= graph.data.frame(CN_edgelist, directed =TRUE)",
        "> ",
        "",
        "> ",
        "#Now do the same and create a data frame from the discussion networks data. ",
        "> ",
        "DN_graph= graph.data.frame(DN_edgelist, directed =TRUE)",
        "> ",
        "",
        "> ",
        "#---------- CREATING NETWORK GRAPHS -----------",
        "> ",
        "",
        "> ",
        "#In this we learn how to set the seed, and change the properties of the network ",
        "> ",
        "#graphs",
        "> ",
        "",
        "> ",
        "#Colleaugue Networks 1st try: Plotting with colour ",
        "> ",
        "",
        "> ",
        "#Layout options",
        "> ",
        "#Set seed ",
        "> ",
        "set.seed(3952)",
        "> ",
        "layout1<- layout.fruchterman.reingold(CN_graph) #using a spring network reflects",
        "> ",
        "#distances within network ",
        "> ",
        "",
        "> ",
        "#Node options: colour ",
        "> ",
        "V(CN_graph)$color<- \"grey\"",
        "> ",
        "V(CN_graph)[degree(CN_graph, mode = \"in\")>8]$color <- \"yellow\"",
        "> ",
        "",
        "> ",
        "#Edge options: colour",
        "> ",
        "E(CN_graph)$color <- \"grey\"",
        "> ",
        "",
        "> ",
        "#Plot the network graph  ",
        "> ",
        "plot(CN_graph)",
        "> ",
        "",
        "> ",
        "#Colleaugue networks 2nd try: We can alter the size of the nodes to best fit the ",
        "> ",
        "#graph ",
        "> ",
        "",
        "> ",
        "#Layout options",
        "> ",
        "#Set seed ",
        "> ",
        "set.seed(3952)",
        "> ",
        "layout1<- layout.fruchterman.reingold(CN_graph) #using a spring network reflects",
        "> ",
        "#distances within network ",
        "> ",
        "",
        "> ",
        "#Node colour",
        "> ",
        "V(CN_graph)$color<- \"grey\"",
        "> ",
        "V(CN_graph)[degree(CN_graph, mode = \"in\")>8]$color <- \"yellow\"",
        "> ",
        "",
        "> ",
        "#Edge colour ",
        "> ",
        "E(CN_graph)$color <- \"grey\"",
        "> ",
        "",
        "> ",
        "#Node options: size ",
        "> ",
        "V(CN_graph)$size= degree(CN_graph, mode= \"in\")/5",
        "> ",
        "",
        "> ",
        "#Now plot the graph to see with the nodes being a different size",
        "> ",
        "plot(CN_graph)",
        "> ",
        "",
        "> ",
        "#Colleaugue networks 3rd try: We still have larger arrows that are distracting ",
        "> ",
        "# So we can fix the size of the arrows",
        "> ",
        "",
        "> ",
        "#Set seed ",
        "> ",
        "set.seed(3952)",
        "> ",
        "layout1<- layout.fruchterman.reingold(CN_graph) #using a spring network reflects",
        "> ",
        "#distances within network ",
        "> ",
        "",
        "> ",
        "#Node options: colour ",
        "> ",
        "V(CN_graph)$color<- \"grey\"",
        "> ",
        "V(CN_graph)[degree(CN_graph, mode = \"in\")>8]$color <- \"yellow\"",
        "> ",
        "",
        "> ",
        "#Edge options: colour",
        "> ",
        "E(CN_graph)$color <- \"grey\"",
        "> ",
        "",
        "> ",
        "#Node options: size ",
        "> ",
        "V(CN_graph)$size= degree(CN_graph, mode= \"in\")/5",
        "> ",
        "",
        "> ",
        "#Fixing arrow size ",
        "> ",
        "plot(CN_graph, edge.arrow.size=0.25, edge.arrow.mode= \"-\")",
        "> ",
        "",
        "> ",
        "#Colleaugue networks try 4: In this dataset there are loops which are where a",
        "> ",
        "# node is able to \"nominate\" themselves. In this case we don't need these loops. ",
        "> ",
        "",
        "> ",
        "#Getting rid of loops",
        "> ",
        "CN_graph2 <- simplify(CN_graph, remove.multiple = TRUE, remove.loops = TRUE)",
        "> ",
        "",
        "> ",
        "#layout options",
        "> ",
        "set.seed(3952)",
        "> ",
        "layout1 <- layout.fruchterman.reingold(CN_graph2)",
        "> ",
        "",
        "> ",
        "#Node size ",
        "> ",
        "V(CN_graph2)$size= degree(CN_graph2, mode= \"in\")/5",
        "> ",
        "",
        "> ",
        "#Node colour",
        "> ",
        "V(CN_graph2)$color<- \"grey\"",
        "> ",
        "V(CN_graph2)[degree(CN_graph2, mode = \"in\")>8]$color <- \"yellow\"",
        "> ",
        "",
        "> ",
        "#edge colour ",
        "> ",
        "E(CN_graph2)$color <- \"grey\"",
        "> ",
        "",
        "> ",
        "#Plotting graph without loops ",
        "> ",
        "plot(CN_graph2, edge.arrow.size=0.25, edge.arrow.mode= \"-\")",
        "> ",
        "",
        "> ",
        "#Colleague Network 5th Try: Working with the Colleaugues Network Attributes",
        "> ",
        "#this allows us to look at graduate students and researchers. ",
        "> ",
        "",
        "> ",
        "#Layout options ",
        "> ",
        "set.seed(3256)",
        "> ",
        "layout1 <- layout.fruchterman.reingold(CN_graph2, niter=500)",
        "> ",
        "",
        "> ",
        "#Node colour...",
        "> ",
        "V(CN_graph2)$color <- \"grey\"",
        "> ",
        "V(CN_graph2)[degree(CN_graph, mode=\"in\")>8]$color <- \"yellow\"  ",
        "> ",
        "V(CN_graph2)$size=degree(CN_graph, mode = \"in\")/5 ",
        "> ",
        "",
        "> ",
        "V(CN_graph2)$color <- ifelse(CNA[V(CN_graph2), 2] == \"Researcher\", \"blue\", \"red\")",
        "> ",
        "",
        "> ",
        "#edge colour",
        "> ",
        "E(CN_graph2)$color <- \"grey\"",
        "> ",
        "",
        "> ",
        "plot(CN_graph2, edge.arrow.size= 0.25, edge.arrow.mode= \"-\", vertex.label= NA)",
        "> ",
        "",
        "> ",
        "#DISCUSSION NETWORK",
        "> ",
        "",
        "> ",
        "#Discussion network 1st try:",
        "> ",
        "",
        "> ",
        "#Create a dataframe with the data. ",
        "> ",
        "DN_graph2 <- simplify(DN_graph, remove.multiple = TRUE, remove.loops = TRUE)",
        "> ",
        "",
        "> ",
        "#Now we are going to use the discussion networks attributes ",
        "> ",
        "",
        "> ",
        "#Layout options",
        "> ",
        "set.seed(3256)",
        "> ",
        "layout1 <- layout.fruchterman.reingold(DN_graph2, niter=500)",
        "> ",
        "",
        "> ",
        "#nodes size and colour",
        "> ",
        "V(DN_graph2)$size=degree(DN_graph, mode = \"in\")/5 ",
        "> ",
        "V(DN_graph2)$color <- ifelse(DNA[V(DN_graph2), 2] == \"Researcher\", \"blue\", \"red\")",
        "> ",
        "",
        "> ",
        "#Edge colour ",
        "> ",
        "E(DN_graph2)$color <- \"grey\"",
        "> ",
        "",
        "> ",
        "#Plot this first graph ",
        "> ",
        "plot(DN_graph2,edge.arrow.size= 0.25, edge.arrow.mode= \"-\", vertex.label= NA)",
        "> ",
        "",
        "> ",
        "#Discussion network 2nd try: Try with a different layout ",
        "> ",
        "",
        "> ",
        "#Layout options",
        "> ",
        "set.seed(3256)",
        "> ",
        "layout1 <- layout_with_kk(DN_graph2)",
        "> ",
        "",
        "> ",
        "#nodes size and colour",
        "> ",
        "V(DN_graph2)$size=degree(DN_graph, mode = \"in\")/5 #emphasizes distances ",
        "> ",
        "V(DN_graph2)$color <- ifelse(DNA[V(DN_graph2), 2] == \"Researcher\", \"blue\", \"red\")",
        "> ",
        "",
        "> ",
        "#Edge colour ",
        "> ",
        "E(DN_graph2)$color <- \"grey\"",
        "> ",
        "",
        "> ",
        "#Now plot with this layout to see the difference. ",
        "> ",
        "plot(DN_graph2,edge.arrow.size= 0.25, edge.arrow.mode= \"-\", vertex.label= NA)",
        "> ",
        "plot(CN_graph, edge.arrow.size=0.25, edge.arrow.mode= \"-\")",
        "> ",
        "graph.density(DN_graph2, loop=FALSE)",
        "[1] 0.04098679\n",
        "> ",
        "graph.density(CN_graph2, loop= FALSE)",
        "[1] 0.06103362\n",
        "> ",
        "DN_graph2 <- simplify(DN_graph, remove.multiple = TRUE, remove.loops = TRUE)",
        "> ",
        "plot(CN_graph2, edge.arrow.size= 0.25, edge.arrow.mode= \"-\", vertex.label= NA)",
        "> ",
        "mean_distance(DN_graph2)",
        "[1] 2.70302\n",
        "> ",
        "mean_distance(CN_graph2)",
        "[1] 2.548821\n",
        "> ",
        "degree_distribution(DN_graph2)",
        " [1] 0.000000000 0.111111111 0.069444444 0.069444444 0.076388889 0.069444444 0.041666667\n [8] 0.048611111 0.041666667 0.055555556 0.048611111 0.041666667 0.000000000 0.034722222\n[15] 0.027777778 0.020833333 0.027777778 0.020833333 0.020833333 0.020833333 0.000000000\n[22] 0.006944444 0.027777778 0.013888889 0.000000000 0.000000000 0.006944444 0.006944444\n[29] 0.000000000 0.006944444 0.006944444 0.006944444 0.006944444 0.000000000 0.000000000\n[36] 0.000000000 0.000000000 0.000000000 0.006944444 0.000000000 0.000000000",
        " 0.000000000\n[43] 0.006944444 0.000000000 0.000000000 0.006944444 0.006944444 0.000000000 0.000000000\n[50] 0.000000000 0.000000000 0.006944444 0.000000000 0.006944444 0.006944444 0.000000000\n[57] 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000\n[64] 0.006944444 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000\n[71] 0.000000000 0.000000000 0.000000000 0.006944444\n",
        "> ",
        "DDD <- degree.distribution(DN_graph2)",
        "> ",
        "DDD2 <- as.data.frame(DDD)",
        "> ",
        "qplot (DDD, data=DDD2, geom = \"histogram\", binwidth= 0.001, ",
        "+ ",
        "       ylab= \"Number of Connections\", ",
        "+ ",
        "       xlab= \"Probability of Number of Connections\")",
        "> ",
        "transitivity (DN_graph2)",
        "[1] 0.28632\n",
        "> ",
        "transitivity (CN_graph2)",
        "[1] 0.3309331\n",
        "> ",
        "DNT<- transitivity (DN_graph2)",
        "> ",
        "CNT<- transitivity (CN_graph2)",
        "> ",
        "DOD<- degree(DN_graph2, mode= \"out\")",
        "> ",
        "DOD <- as.data.frame(DOD)",
        "> ",
        "DOD",
        "    DOD\n32    5\n36   12\n219   2\n90   19\n155  14\n190  47\n25   27\n28    7\n12    8\n72    9\n43    6\n132   6\n61   34\n205  22\n65   30\n40    1\n117   1\n112   1\n86    2\n136   3\n87    2\n14   24\n92    5\n213   1\n181   2\n209  10\n195   4\n200  54\n46   14\n189   2\n162   5\n143   4\n116  13\n9     7\n204  15\n3     3\n41   18\n201   8\n159   9\n56    2\n216   7\n212  35\n114   9\n26    8\n134   2\n54    5\n29   14\n137   0\n91    4\n140   2\n142   4\n27    3\n19    2\n71   24\n89    5\n154   4\n66    1\n131   5\n157  10\n34   23\n76    2\n179  39\n210   4\n128",
        "   6\n44   11\n163   1\n150   5\n94   18\n194   1\n172   2\n1    14\n169  42\n47    2\n167   1\n24    6\n42    9\n64    2\n168   7\n161   6\n149   8\n39   13\n101  11\n62    9\n223   0\n301   0\n253   0\n158   0\n227   0\n290   0\n306   0\n57    0\n173   0\n232   0\n252   0\n264   0\n286   0\n222   0\n234   0\n235   0\n258   0\n287   0\n254   0\n224   0\n226   0\n228   0\n238   0\n239   0\n268   0\n274   0\n279   0\n291   0\n292   0\n299   0\n302   0\n304   0\n307   0\n309   0\n170   0\n276   0\n280   0\n249   0\n272   0\n308   0\n217   0\n295   0\n277   0\n221   0\n283",
        "   0\n229   0\n257   0\n146   0\n263   0\n269   0\n289   0\n38    0\n192   0\n237   0\n267   0\n231   0\n123   0\n248   0\n246   0\n305   0\n4     0\n",
        "> ",
        "degree(DN_graph2, mode= \"out\")",
        " 32  36 219  90 155 190  25  28  12  72  43 132  61 205  65  40 117 112  86 136  87  14 \n  5  12   2  19  14  47  27   7   8   9   6   6  34  22  30   1   1   1   2   3   2  24 \n 92 213 181 209 195 200  46 189 162 143 116   9 204   3  41 201 159  56 216 212 114  26 \n  5   1   2  10   4  54  14   2   5   4  13   7  15   3  18   8   9   2   7  35   9   8 \n134  54  29 137  91 140 142  27  19  71  89 154  66 131 157  34  76 179 210 128  44 163 \n  2   5  14   0   4   2   4   3   2  24   5   4   1   5  10  23   2 ",
        " 39   4   6  11   1 \n150  94 194 172   1 169  47 167  24  42  64 168 161 149  39 101  62 223 301 253 158 227 \n  5  18   1   2  14  42   2   1   6   9   2   7   6   8  13  11   9   0   0   0   0   0 \n290 306  57 173 232 252 264 286 222 234 235 258 287 254 224 226 228 238 239 268 274 279 \n  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n291 292 299 302 304 307 309 170 276 280 249 272 308 217 295 277 221 283 229 257 146 263 \n  0   0   0   0   0   0   0   0   0   0   0   0 ",
        "  0   0   0   0   0   0   0   0   0   0 \n269 289  38 192 237 267 231 123 248 246 305   4 \n  0   0   0   0   0   0   0   0   0   0   0   0 \n",
        "> ",
        "DOD<- degree(DN_graph2, mode= \"out\")",
        "> ",
        "DOD <- as.data.frame(DOD)",
        "> ",
        "DID<- degree(DN_graph2, mode= \"in\")",
        "> ",
        "DID <- as.data.frame(DID)",
        "> ",
        "set.seed(3256)",
        "> ",
        "layout1 <- layout.fruchterman.reingold(DN_graph2, niter= 500)",
        "> ",
        "",
        "> ",
        "#nodes size and colour",
        "> ",
        "V(DN_graph2)$size=degree(DN_graph, mode = \"in\")/5 #emphasizes distances ",
        "> ",
        "V(DN_graph2)$color <- ifelse(DNA[V(DN_graph2), 2] == \"Researcher\", \"blue\", \"red\")",
        "> ",
        "",
        "> ",
        "#Edge colour ",
        "> ",
        "E(DN_graph2)$color <- \"grey\"",
        "> ",
        "",
        "> ",
        "plot(DN_graph2,edge.arrow.size= 0.25, edge.arrow.mode= \"-\", vertex.label= NA)",
        "> ",
        "#visualize with \"out\"",
        "> ",
        "set.seed(3256)",
        "> ",
        "layout1 <- layout.fruchterman.reingold(DN_graph2, niter= 500)",
        "> ",
        "",
        "> ",
        "#nodes size and colour",
        "> ",
        "V(DN_graph2)$size=degree(DN_graph, mode = \"out\")/5 #emphasizes distances ",
        "> ",
        "V(DN_graph2)$color <- ifelse(DNA[V(DN_graph2), 2] == \"Researcher\", \"blue\", \"red\")",
        "> ",
        "",
        "> ",
        "#Edge colour ",
        "> ",
        "E(DN_graph2)$color <- \"grey\"",
        "> ",
        "",
        "> ",
        "plot(DN_graph2,edge.arrow.size= 0.25, edge.arrow.mode= \"-\", vertex.label= NA)",
        "> ",
        "#visualize with \"all\"",
        "> ",
        "",
        "> ",
        "set.seed(3256)",
        "> ",
        "layout1 <- layout.fruchterman.reingold(DN_graph2, niter= 500)",
        "> ",
        "",
        "> ",
        "#nodes size and colour",
        "> ",
        "V(DN_graph2)$size=degree(DN_graph, mode = \"all\")/5 #emphasizes distances ",
        "> ",
        "V(DN_graph2)$color <- ifelse(DNA[V(DN_graph2), 2] == \"Researcher\", \"blue\", \"red\")",
        "> ",
        "",
        "> ",
        "#Edge colour ",
        "> ",
        "E(DN_graph2)$color <- \"grey\"",
        "> ",
        "",
        "> ",
        "plot(DN_graph2,edge.arrow.size= 0.25, edge.arrow.mode= \"-\", vertex.label= NA)",
        "> ",
        "################################################################################",
        "> ",
        "",
        "> ",
        "#                              PRACTICING TECHNIQUES                           #       ",
        "> ",
        "",
        "> ",
        "################################################################################",
        "> ",
        "",
        "> ",
        "############################# CREATING NETWORK GRAPHS ##########################",
        "> ",
        "",
        "> ",
        "#First create a sample dataset to work with",
        "> ",
        "#Here we created a dataset with 20 nodes, the probability of drawing an edge being ",
        "> ",
        "#0.2 with the graph being non-directed and not having any loops. ",
        "> ",
        "sample <-sample_gnp(60,.2,directed=FALSE, loops=FALSE)",
        "> ",
        "",
        "> ",
        "#observe data",
        "> ",
        "head(sample)",
        "6 x 60 sparse Matrix of class \"dgCMatrix\"\n                                                                                          \n[1,] . 1 . . . . . . . . . . . . 1 . . . . 1 . . . 1 . . . 1 1 . . . 1 . . . . . . . . . .\n[2,] 1 . . . . . . . 1 . 1 . . 1 . . 1 1 . . 1 . . 1 . . . 1 . . 1 . . . . . . . . 1 1 . .\n[3,] . . . . . . . . 1 . . . . . . . . . . . . 1 . . . . . . . . 1 . . 1 . . . . . 1 1 . .\n[4,] . . . . . . . . . . 1 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1 . .\n[5,] . . . . . .",
        " . 1 . 1 . . . . . . . . . . . . 1 1 . . . 1 . . 1 1 . . . . . . 1 . . . .\n[6,] . . . . . . . 1 1 . . 1 . 1 . . . . . . . 1 . . 1 . . 1 . . 1 . . . . . . . . 1 1 . .\n                                      \n[1,] . . 1 . . . . . . . 1 1 1 . 1 . 1\n[2,] . . . . . . . . . 1 . . . 1 . . .\n[3,] 1 . . . . . . 1 . . . . . . . . .\n[4,] . . . 1 . . . . . 1 1 1 . 1 . . .\n[5,] . . . . . 1 1 . . . . . . . . 1 .\n[6,] . . . . . . . . . . . . . . 1 . .\n",
        "> ",
        "",
        "> ",
        "#Visualize the data",
        "> ",
        "plot(sample)",
        "> ",
        "",
        "> ",
        "#This looks good but we can alter the colours, layout and other features to make ",
        "> ",
        "#it look better",
        "> ",
        "",
        "> ",
        "#Set seed so that the graph is reproduced the same each time we run it",
        "> ",
        "set.seed(3952)",
        "> ",
        "",
        "> ",
        "#Use the fruchterman.reingold layout to visualize the data ",
        "> ",
        "layout1<- layout.fruchterman.reingold(sample) #this is a spring network which ",
        "> ",
        "#reflects distances within network ",
        "> ",
        "",
        "> ",
        "#Node options - the V refers to vertices",
        "> ",
        "V(sample)$color<- \"grey\"",
        "> ",
        "V(sample)[degree(sample, mode = \"in\")>15]$color <- \"orange\"",
        "> ",
        "",
        "> ",
        "#Edge options - the E refers to edges (lines)",
        "> ",
        "E(sample)$color <- \"grey\" ",
        "> ",
        "",
        "> ",
        "#Now plot the new graph ",
        "> ",
        "plot(sample)",
        "> ",
        "",
        "> ",
        "#Notice that the nodes are quite large and overpower the lines. We can fix this. ",
        "> ",
        "",
        "> ",
        "#Fix the size of the nodes ",
        "> ",
        "V(sample)$size= degree(sample, mode= \"in\")/1.2",
        "> ",
        "",
        "> ",
        "#Now plot again with nodes size changes",
        "> ",
        "plot(sample)",
        "> ",
        "",
        "> ",
        "#Now we can plot our smample with arrow sizes that are small enough that they ",
        "> ",
        "#don't overpower the graph. ",
        "> ",
        "plot(sample, edge.arrow.size=0.25, edge.arrow.mode= \"-\")",
        "> ",
        "graph.density(sample, loop=FALSE)",
        "[1] 0.1932203\n",
        "> ",
        "mean_distance(sample)",
        "[1] 1.899435\n",
        "> ",
        "mean_distance(sample)",
        "[1] 1.899435\n",
        "> ",
        "degree_distribution(sample)",
        " [1] 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000 0.01666667 0.01666667\n [8] 0.05000000 0.13333333 0.08333333 0.08333333 0.15000000 0.13333333 0.11666667\n[15] 0.05000000 0.06666667 0.05000000 0.00000000 0.01666667 0.01666667 0.01666667\n",
        "> ",
        "Degree.dist <- degree.distribution(sample)",
        "> ",
        "Degree.dist2 <- as.data.frame(Degree.dist)",
        "> ",
        "qplot (Degree.dist, data=Degree.dist2, geom = \"histogram\", binwidth= 0.005, ",
        "+ ",
        "       ylab= \"Number of Connections\", ",
        "+ ",
        "       xlab= \"Probability of Number of Connections\")",
        "> ",
        "transitivity (sample)",
        "[1] 0.187646\n",
        "> ",
        "plot(sample, edge.arrow.size=0.25, edge.arrow.mode= \"-\")",
        "> ",
        "SN<- read_graph(paste(working.dir,\"/\",\"Songbird-Network/weighted_network_social_songbird.graphml\",sep=\"\"),",
        "+ ",
        "                format=c(\"graphml\"))",
        "Error in read.graph.graphml(file, ...) : \n  At rinterface.c:6077 : Cannot open GraphML file, File operation error\n",
        "> ",
        "SN<- read_graph(paste(working.dir,\"/\",d.path,\"/weighted_network_social_songbird.graphml\",sep=\"\"),",
        "+ ",
        "                format=c(\"graphml\"))",
        "Error in read.graph.graphml(file, ...) : \n  At rinterface.c:6077 : Cannot open GraphML file, File operation error\n",
        "> ",
        "SN<- read_graph(paste(d.path,\"weighted_network_social_songbird.graphml\",sep=\"/\"),",
        "+ ",
        "                format=c(\"graphml\"))",
        "Error in read.graph.graphml(file, ...) : \n  At rinterface.c:6077 : Cannot open GraphML file, File operation error\n",
        "> ",
        "SN<- read_graph(paste(d.path,\"weighted_network_social_songbird.graphml\",sep=\"/\"),",
        "+ ",
        "                format=c(\"graphml\"))",
        "Error in read.graph.graphml(file, ...) : \n  At rinterface.c:6077 : Cannot open GraphML file, File operation error\n",
        "> ",
        "SN<- read_graph(paste(d.path,\"weighted_network_social_songbird.graphml\",sep=\"/\"),",
        "+ ",
        "                format=c(\"graphml\"))",
        "> ",
        "ZN<- read_graph(paste(d.paht,\"UNweighted_zebra_interaction.graphml\",sep = \"/\"),",
        "+ ",
        "                format=c(\"graphml\"))",
        "Error in paste(d.paht, \"UNweighted_zebra_interaction.graphml\", sep = \"/\") : \n  object 'd.paht' not found\n",
        "> ",
        "ZN<- read_graph(paste(d.path,\"UNweighted_zebra_interaction.graphml\",sep = \"/\"),",
        "+ ",
        "                format=c(\"graphml\"))",
        "> ",
        "################################################################################",
        "> ",
        "",
        "> ",
        "#                              MAIN SCRIPT                                     #",
        "> ",
        "",
        "> ",
        "################################################################################",
        "> ",
        "",
        "> ",
        "#----------------------------TABLE OF CONTENTS----------------------------------",
        "> ",
        "",
        "> ",
        "# - Overview",
        "> ",
        "# - Packages downloaded",
        "> ",
        "# - Libraries",
        "> ",
        "# - Data Download ",
        "> ",
        "# - Workflow ",
        "> ",
        "# - Source the rest of the code",
        "> ",
        "",
        "> ",
        "################################################################################",
        "> ",
        "",
        "> ",
        "#---------------------------------OVERVIEW--------------------------------------",
        "> ",
        "",
        "> ",
        "#The following contents within this main directory include the packages, ",
        "> ",
        "#libraries, dataset and the workflow that is used in this analysis. For the ",
        "> ",
        "#purpose of this analysis the scripts should be run in the folling order to gain ",
        "> ",
        "#replicatory results:",
        "> ",
        "",
        "> ",
        "#    1. MainScript:(This included data organization with the overview of the ",
        "> ",
        "#                   workflow used in this project)",
        "> ",
        "#",
        "> ",
        "#    2. LearningTechniques: (This includes the dataset we used and the analyses ",
        "> ",
        "#                           that we ran to produce the graphs and numerical values)",
        "> ",
        "#",
        "> ",
        "#",
        "> ",
        "#    3. PracticingTechniques: (This includes our creation of our own dataset and ",
        "> ",
        "#                              the analyses we used on this dataset)",
        "> ",
        "#",
        "> ",
        "#    4. TestingTechniques: (This includes the analyses we ran on a dataset ",
        "> ",
        "#                           provided to us)",
        "> ",
        "",
        "> ",
        "#------------------------------PACKAGE DOWNLOAD---------------------------------",
        "> ",
        "",
        "> ",
        "# This is a list of the package used for these analyses",
        "> ",
        "",
        "> ",
        "install.packages(\"igraph\")",
        "Error in install.packages : Updating loaded packages\n",
        "> ",
        "install.packages(\"readr\")",
        "Error in install.packages : Updating loaded packages\n",
        "> ",
        "install.packages(\"haven\")",
        "Error in install.packages : Updating loaded packages\n",
        "> ",
        "install.packages(\"ggplot2\")",
        "Error in install.packages : Updating loaded packages\n",
        "> ",
        "",
        "> ",
        "#---------------------------------LIBRARIES-------------------------------------",
        "> ",
        "",
        "> ",
        "# Load the packages in the libraries ",
        "> ",
        "",
        "> ",
        "#load libraries",
        "> ",
        "library(igraph)",
        "> ",
        "library (readr)",
        "> ",
        "library(haven)",
        "> ",
        "library(ggplot2)",
        "> ",
        "",
        "> ",
        "#--------------------------------DATA DOWLOAD-----------------------------------",
        "> ",
        "#Set our working directory ",
        "> ",
        "",
        "> ",
        "working.dir <- getwd()",
        "> ",
        "",
        "> ",
        "# The raw data files used in the practicing techniques section of this analysis ",
        "> ",
        "# was found from a youtube channel",
        "> ",
        "#https://www.youtube.com/watch?v=XNw-DZFsFYA&list=PL1M5TsfDV6Vs7tnHGNgowEUwJW-O8QVp5&index=4&fbclid=IwAR0tI0OQna4jte30rqZTZJLHdiiA49viGI2gB6xOnoJ1m_DwXfpT3zcZcpo",
        "> ",
        "#We downloaded the folder that comes along with the channel to work with the CSV's",
        "> ",
        "#This file is titled SSRI Network Tutorial Materials ",
        "> ",
        "",
        "> ",
        "# Read the CSV's within the folder",
        "> ",
        "",
        "> ",
        "CN_edgelist<- read.csv(paste(d.path,\"ColleaugueNetwork.csv\", sep = \"/\"))",
        "> ",
        "DN_edgelist<- read.csv(paste(d.path,\"DiscussionNetwork.csv\", sep = \"/\"))",
        "> ",
        "CNA <- read.csv(paste(d.path,\"ColleaugueAttributes.csv\", sep = \"/\"))",
        "> ",
        "DNA <- read.csv(paste(d.path,\"DiscussionAttributes.csv\", sep = \"/\"))",
        "> ",
        "",
        "> ",
        "#The data we are going to use for our testing techniques was found at ",
        "> ",
        "#https://github.com/jdm286/Animal-Social-Structure-Network-Repository?fbclid=IwAR2C95NiJURf0g2HRkXtZc-skC7S6HxcdGkwPB5z9nwg9MHrG5n7WppjXTI",
        "> ",
        "",
        "> ",
        "# Read the graphs within the folder  ",
        "> ",
        "",
        "> ",
        "SN<- read_graph(paste(d.path,\"weighted_network_social_songbird.graphml\",sep=\"/\"),",
        "+ ",
        "                format=c(\"graphml\"))",
        "> ",
        "",
        "> ",
        "ZN<- read_graph(paste(d.path,\"UNweighted_zebra_interaction.graphml\",sep = \"/\"),",
        "+ ",
        "                format=c(\"graphml\"))",
        "> ",
        "",
        "> ",
        "#-----------------------------------WORKFLOW------------------------------------",
        "> ",
        "",
        "> ",
        "# In our working directory we created 4 pathways to different folders with ",
        "> ",
        "# specific outputs ",
        "> ",
        "",
        "> ",
        "#           - 1. Learn.tech  -> the path to this folder is: l.path",
        "> ",
        "#                 (This folder contains the outputs we produced from learning   ",
        "> ",
        "#                  these social analysis techniques)",
        "> ",
        "#",
        "> ",
        "#           - 2. Pract.tech -> the path to this folder is: p.path",
        "> ",
        "#                 (This folder contains the outputs we produced from our test ",
        "> ",
        "#                 dataset)",
        "> ",
        "#",
        "> ",
        "#           - 3. Test.tech -> the path to this folder is: t.path",
        "> ",
        "#                 (This folder contains the outputs we produced from our real ",
        "> ",
        "#                 dataset)",
        "> ",
        "#",
        "> ",
        "#           - 4. Data.sets -> th path to this folder is d.path",
        "> ",
        "#                 (This folder contains the raw data used in both our learning ",
        "> ",
        "#                 techniques and our testing techniques sections)",
        "> ",
        "",
        "> ",
        "output.folders <- c(\"1.Learn.tech\",\"2.Pract.tech\",\"3.Test.tech\", \"4. Data.sets\")",
        "> ",
        "",
        "> ",
        "# Check to see if the folders exist in the working directory and if they don't, ",
        "> ",
        "# use the following loop. ",
        "> ",
        "# The following loop checks the output.folders list and checks to see ",
        "> ",
        "# if the folders exist in the working directory. If they don't it will create ",
        "> ",
        "# them. ",
        "> ",
        "",
        "> ",
        "# Make the folders using this loop code ",
        "> ",
        "for(i in 1:length(output.folders)) ",
        "+ ",
        "  if(file.exists(output.folders[i]) == FALSE) ",
        "+ ",
        "    dir.create(output.folders[i])",
        "> ",
        "",
        "> ",
        "#-------- Pathways----------",
        "> ",
        "",
        "> ",
        "# The following is a directory of the pathways to each of our output folders",
        "> ",
        "",
        "> ",
        "# Path to 1.Learn.tech",
        "> ",
        "l.path <- paste(working.dir,\"/\",output.folders[1], \"/\", sep=\"\")",
        "> ",
        "",
        "> ",
        "# Path to 2.Pract.tech",
        "> ",
        "p.path <- paste(working.dir,\"/\",output.folders[2], \"/\", sep=\"\")",
        "> ",
        "",
        "> ",
        "# Path to 3.Test.tech",
        "> ",
        "t.path <- paste(working.dir,\"/\",output.folders[3], \"/\", sep=\"\")",
        "> ",
        "",
        "> ",
        "d.path<- paste(working.dir,\"/\",output.folders[4], \"/\", sep=\"\")",
        "> ",
        "",
        "> ",
        "# Now we can save our raw data into the raw data file. ",
        "> ",
        "",
        "> ",
        "write.csv(raw.data, paste(rd.path, \"Raw.Data.csv\"),",
        "+ ",
        "          row.names = FALSE)",
        "Error in is.data.frame(x) : object 'raw.data' not found\n",
        "\nRestarting R session...\n\n"
    ],
    "type" : [
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        3,
        3,
        3,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        2,
        0,
        1,
        2,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        2
    ]
}