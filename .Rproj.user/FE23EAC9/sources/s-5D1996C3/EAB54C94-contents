#Here we created a dataset with 20 nodes, the probability of drawing an edge being
#0.2 with the graph being non-directed and not having any loops.
sample <-sample_gnp(60,.2,directed=FALSE, loops=FALSE)
#degree distribution - how connected you are to 1 person vs more people
degree_distribution(sample)
Degree.dist <- degree.distribution(sample)
Degree.dist2 <- as.data.frame(Degree.dist)
qplot (Degree.dist, data=Degree.dist2, geom = "histogram", binwidth= 0.01,
ylab= "Number of Connections",
xlab= "Probability of Number of Connections")
?xlim
qplot (Degree.dist, data=Degree.dist2, geom = "histogram", binwidth= 0.01,
ylab= "Number of Connections",
xlab= "Probability of Number of Connections",
xlim=(0,1))
qplot (Degree.dist, data=Degree.dist2, geom = "histogram", binwidth= 0.01,
ylab= "Number of Connections",
xlab= "Probability of Number of Connections",
xlim=(0,1))
qplot (Degree.dist, data=Degree.dist2, geom = "histogram", binwidth= 0.01,
ylab= "Number of Connections",
xlab= "Probability of Number of Connections",
xlim=(0,1))
?xlim
qplot (Degree.dist, data=Degree.dist2, geom = "histogram", binwidth= 0.01,
ylab= "Number of Connections",
xlab= "Probability of Number of Connections",
xlim(0, 1))
qplot (Degree.dist, data=Degree.dist2, geom = "histogram", binwidth= 0.01,
ylab= "Number of Connections",
xlab= "Probability of Number of Connections",
xlim(0, 1))
?xlim
qplot (Degree.dist, data=Degree.dist2, geom = "histogram", binwidth= 0.01,
ylab= "Number of Connections",
xlab= "Probability of Number of Connections",
xlim(0, 1))
qplot (Degree.dist, data=Degree.dist2, geom = "histogram", binwidth= 0.0001,
ylab= "Number of Connections",
xlab= "Probability of Number of Connections",
xlim(0, 1))
qplot (Degree.dist, data=Degree.dist2, geom = "histogram", binwidth= 0.0001,
ylab= "Number of Connections",
xlab= "Probability of Number of Connections")
plot(sample, edge.arrow.size=0.25, edge.arrow.mode= "-")
qplot (Degree.dist, data=Degree.dist2, geom = "histogram", binwidth= 0.0001,
ylab= "Number of Connections",
xlab= "Probability of Number of Connections")
ylab= "Number of Connections",
xlab= "Probability of Number of Connections")
qplot (Degree.dist, data=Degree.dist2, geom = "histogram", binwidth= 0.01,
ylab= "Number of Connections",
xlab= "Probability of Number of Connections"
qplot (Degree.dist, data=Degree.dist2, geom = "histogram", binwidth= 0.01,
ylab= "Number of Connections",
xlab= "Probability of Number of Connections")
qplot (Degree.dist, data=Degree.dist2, geom = "histogram", binwidth= 0.01,
ylab= "Number of Connections",
xlab= "Probability of Number of Connections")
qplot (Degree.dist, data=Degree.dist2, geom = "histogram", binwidth= 0.001,
ylab= "Number of Connections",
xlab= "Probability of Number of Connections")
qplot (Degree.dist, data=Degree.dist2, geom = "histogram", binwidth= 0.015,
ylab= "Number of Connections",
xlab= "Probability of Number of Connections")
qplot (Degree.dist, data=Degree.dist2, geom = "histogram", binwidth= 0.0015,
ylab= "Number of Connections",
xlab= "Probability of Number of Connections")
qplot (Degree.dist, data=Degree.dist2, geom = "histogram", binwidth= 0.005,
ylab= "Number of Connections",
xlab= "Probability of Number of Connections")
graph.density(sample, loop=FALSE)
mean_distance(sample)
qplot (Degree.dist, data=Degree.dist2, geom = "histogram", binwidth= 0.005,
ylab= "Number of Connections",
xlab= "Probability of Number of Connections"
col= "red")
qplot (Degree.dist, data=Degree.dist2, geom = "histogram", binwidth= 0.005,
ylab= "Number of Connections",
xlab= "Probability of Number of Connections"
col= "red")
Degree.dist <- degree.distribution(sample)
Degree.dist2 <- as.data.frame(Degree.dist)
View(Degree.dist2)
View(Degree.dist2)
transitivity (sample)
routes_network <- network(edges, vertex.attr = nodes, matrix.type = "edgelist",
ignore.eval = FALSE)
library(network)
install.packages("network")
library(network)
routes_network <- network(edges, vertex.attr = nodes, matrix.type = "edgelist",
ignore.eval = FALSE)
routes_network <- network(edges, vertex.attr = nodes, matrix.type = "edgelist",
ignore.eval = FALSE)
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
#First create a sample dataset to work with
#Here we created a dataset with 20 nodes, the probability of drawing an edge being
#0.2 with the graph being non-directed and not having any loops.
sample <-sample_gnp(60,.2,directed=FALSE, loops=FALSE)
#observe data
head(sample)
#Visualize the data
plot(sample)
#This looks good but we can alter the colours, layout and other features to make
#it look better
#Set seed so that the graph is reproduced the same each time we run it
set.seed(3952)
#Use the fruchterman.reingold layout to visualize the data
layout1<- layout.fruchterman.reingold(sample) #this is a spring network which
#reflects distances within network
#Node options - the V refers to vertices
V(sample)$color<- "grey"
V(sample)[degree(sample, mode = "in")>15]$color <- "orange"
#Edge options - the E refers to edges (lines)
E(sample)$color <- "grey"
#Now plot the new graph
plot(sample)
#Notice that the nodes are quite large and overpower the lines. We can fix this.
#Fix the size of the nodes
V(sample)$size= degree(sample, mode= "in")/1.2
#Now plot again with nodes size changes
plot(sample)
#Now we can plot our smample with arrow sizes that are small enough that they
#don't overpower the graph.
plot(sample, edge.arrow.size=0.25, edge.arrow.mode= "-")
############################# CONNECTIVIY AND POSITION #########################
#This section includes outputs that describe the data that can depicted through
#numerical values as well as
#Density - how connected you are vs how connected you could be
graph.density(sample, loop=FALSE)
#Average path length - larger path distance = less dense network
mean_distance(sample)
#degree distribution - how connected you are to 1 person vs more people
degree_distribution(sample)
Degree.dist <- degree.distribution(sample)
#Make into a dataframe
Degree.dist2 <- as.data.frame(Degree.dist)
qplot (Degree.dist, data=Degree.dist2, geom = "histogram", binwidth= 0.005,
ylab= "Number of Connections",
xlab= "Probability of Number of Connections")
#clustering coefficients
# Transitivity measures how "cliquey" the network is. For example if "A" and "B"
# and "A" and "C" are connected, high transitifity would be if "B" and "C"
# are connected.
transitivity (sample)
setwd("~/Desktop/SSRI Network Tutorial Materials")
################################################################################
#                              PRACTICING TECHNIQUES                           #       #
################################################################################
############################# CREATING NETWORK GRAPHS ##########################
#First create a sample dataset to work with
#Here we created a dataset with 20 nodes, the probability of drawing an edge being
#0.2 with the graph being non-directed and not having any loops.
sample <-sample_gnp(60,.2,directed=FALSE, loops=FALSE)
#observe data
head(sample)
#Visualize the data
plot(sample)
#This looks good but we can alter the colours, layout and other features to make
#it look better
#Set seed so that the graph is reproduced the same each time we run it
set.seed(3952)
#Use the fruchterman.reingold layout to visualize the data
layout1<- layout.fruchterman.reingold(sample) #this is a spring network which
#reflects distances within network
#Node options - the V refers to vertices
V(sample)$color<- "grey"
V(sample)[degree(sample, mode = "in")>15]$color <- "orange"
#Edge options - the E refers to edges (lines)
E(sample)$color <- "grey"
#Now plot the new graph
plot(sample)
#Notice that the nodes are quite large and overpower the lines. We can fix this.
#Fix the size of the nodes
V(sample)$size= degree(sample, mode= "in")/1.2
#Now plot again with nodes size changes
plot(sample)
#Now we can plot our smample with arrow sizes that are small enough that they
#don't overpower the graph.
plot(sample, edge.arrow.size=0.25, edge.arrow.mode= "-")
############################# CONNECTIVIY AND POSITION #########################
#This section includes outputs that describe the data that can depicted through
#numerical values as well as
#Density - how connected you are vs how connected you could be
graph.density(sample, loop=FALSE)
#Average path length - larger path distance = less dense network
mean_distance(sample)
#degree distribution - how connected you are to 1 person vs more people
degree_distribution(sample)
Degree.dist <- degree.distribution(sample)
#Make into a dataframe
Degree.dist2 <- as.data.frame(Degree.dist)
qplot (Degree.dist, data=Degree.dist2, geom = "histogram", binwidth= 0.005,
ylab= "Number of Connections",
xlab= "Probability of Number of Connections")
#clustering coefficients
# Transitivity measures how "cliquey" the network is. For example if "A" and "B"
# and "A" and "C" are connected, high transitifity would be if "B" and "C"
# are connected.
transitivity (sample)
#SSRI Networks
#Install packages
install.packages("readr")
install.packages("haven")
library(igraph)
library (readr)
library(haven)
library(ggplot2)
CN_edgelist<- CN
CN_graph= graph.data.frame(CN_edgelist, directed =TRUE)
DN_edgelist<- DN
DN_graph= graph.data.frame(DN_edgelist, directed =TRUE)
#set seed
set.seed(3952)
layout1<- layout.fruchterman.reingold(CN_graph) #using a spring network reflects
#distances within network
?layout
#node options
V(CN_graph)$color<- "grey"
V(CN_graph)[degree(CN_graph, mode = "in")>8]$color <- "yellow"
#edge options
E(CN_graph)$color <- "grey"
#plotting
plot(CN_graph)
#nodes again
#Node size
V(CN_graph)$size= degree(CN_graph, mode= "in")/5
#Node colour
V(CN_graph)$color<- "grey"
V(CN_graph)[degree(CN_graph, mode = "in")>8]$color <- "yellow"
#edge colour
E(CN_graph)$color <- "grey"
plot(CN_graph)
#fixing arrow head
plot(CN_graph, edge.arrow.size=0.25, edge.arrow.mode= "-")
#getting rid of loops
CN_graph2 <- simplify(CN_graph, remove.multiple = TRUE, remove.loops = TRUE)
layout1 <- layout.fruchterman.reingold(CN_graph2)
#Node size
V(CN_graph2)$size= degree(CN_graph2, mode= "in")/5
#Node colour
V(CN_graph2)$color<- "grey"
V(CN_graph2)[degree(CN_graph2, mode = "in")>8]$color <- "yellow"
#edge colour
E(CN_graph2)$color <- "grey"
#plotting graph without loops
plot(CN_graph2, edge.arrow.size=0.25, edge.arrow.mode= "-")
#Load attributes thing
set.seed(3256)
layout1 <- layout.fruchterman.reingold(CN_graph2, niter=500)
#Node colour...
V(CN_graph2)$color <- "grey"
V(CN_graph2)[degree(CN_graph, mode="in")>8]$color <- "yellow"
V(CN_graph2)$size=degree(CN_graph, mode = "in")/5
V(CN_graph2)$color <- ifelse(CNA[V(CN_graph2), 2] == "Researcher", "blue", "red")
#edge colour
E(CN_graph2)$color <- "grey"
plot(CN_graph2, edge.arrow.size= 0.25, edge.arrow.mode= "-", vertex.label= NA)
#DISCUSSION NETWORK
DN_graph2 <- simplify(DN_graph, remove.multiple = TRUE, remove.loops = TRUE)
set.seed(3256)
layout1 <- layout.fruchterman.reingold(DN_graph2, niter=500)
#nodes size and colour
V(DN_graph2)$size=degree(DN_graph, mode = "in")/5
V(DN_graph2)$color <- ifelse(DNA[V(DN_graph2), 2] == "Researcher", "blue", "red")
#Edge colour
E(DN_graph2)$color <- "grey"
plot(DN_graph2,edge.arrow.size= 0.25, edge.arrow.mode= "-", vertex.label= NA)
#try with a different layout
set.seed(3256)
layout1 <- layout_with_kk(DN_graph2)
#nodes size and colour
V(DN_graph2)$size=degree(DN_graph, mode = "in")/5 #emphasizes distances
V(DN_graph2)$color <- ifelse(DNA[V(DN_graph2), 2] == "Researcher", "blue", "red")
#Edge colour
E(DN_graph2)$color <- "grey"
plot(DN_graph2,edge.arrow.size= 0.25, edge.arrow.mode= "-", vertex.label= NA)
#CONNECTIVIY AND POSITION
#Density - how connected you are vs how connected you could be
graph.density(DN_graph2, loop=FALSE)
graph.density(CN_graph2, loop= FALSE)
#average path length - larger path distance = less dense network
mean_distance(DN_graph2)
mean_distance(CN_graph2)
#degree distribution - how connected you are to 1 person vs more people
degree_distribution(DN_graph2)
DDD <- degree.distribution(DN_graph2)
DDD2 <- as.data.frame(DDD)
qplot (DDD, data=DDD2, geom = "histogram", binwidth= 0.001,
ylab= "Number of Connections",
xlab= "Probability of Number of Connections")
#clustering coefficients
transitivity (DN_graph2)
transitivity (CN_graph2)
#create an object to use later
DNT<- transitivity (DN_graph2)
CNT<- transitivity (CN_graph2)
#postitional features
#degree: in, out, all centrality
DOD<- degree(DN_graph2, mode= "out")
DOD <- as.data.frame(DOD)
DID<- degree(DN_graph2, mode= "in")
DID <- as.data.frame(DID)
#visuale to understand positionality with "in"
set.seed(3256)
layout1 <- layout.fruchterman.reingold(DN_graph2, niter= 500)
#nodes size and colour
V(DN_graph2)$size=degree(DN_graph, mode = "in")/5 #emphasizes distances
V(DN_graph2)$color <- ifelse(DNA[V(DN_graph2), 2] == "Researcher", "blue", "red")
#Edge colour
E(DN_graph2)$color <- "grey"
plot(DN_graph2,edge.arrow.size= 0.25, edge.arrow.mode= "-", vertex.label= NA)
#visualize with "out"
set.seed(3256)
layout1 <- layout.fruchterman.reingold(DN_graph2, niter= 500)
#nodes size and colour
V(DN_graph2)$size=degree(DN_graph, mode = "out")/5 #emphasizes distances
V(DN_graph2)$color <- ifelse(DNA[V(DN_graph2), 2] == "Researcher", "blue", "red")
#Edge colour
E(DN_graph2)$color <- "grey"
plot(DN_graph2,edge.arrow.size= 0.25, edge.arrow.mode= "-", vertex.label= NA)
#visualize with "all"
set.seed(3256)
layout1 <- layout.fruchterman.reingold(DN_graph2, niter= 500)
#nodes size and colour
V(DN_graph2)$size=degree(DN_graph, mode = "all")/5 #emphasizes distances
V(DN_graph2)$color <- ifelse(DNA[V(DN_graph2), 2] == "Researcher", "blue", "red")
#Edge colour
E(DN_graph2)$color <- "grey"
plot(DN_graph2,edge.arrow.size= 0.25, edge.arrow.mode= "-", vertex.label= NA)
CN_edgelist<- read.csv(ColleaugueNetwork.csv)
CN_edgelist<- read.csv(ColleaugueNetwork.csv)
CN_edgelist<- read.csv("ColleaugueNetwork.csv")
CN_graph= graph.data.frame(CN_edgelist, directed =TRUE)
DN_edgelist<- DN
DN_graph= graph.data.frame(DN_edgelist, directed =TRUE)
#set seed
set.seed(3952)
layout1<- layout.fruchterman.reingold(CN_graph) #using a spring network reflects
#distances within network
?layout
#node options
V(CN_graph)$color<- "grey"
V(CN_graph)[degree(CN_graph, mode = "in")>8]$color <- "yellow"
#edge options
E(CN_graph)$color <- "grey"
#plotting
plot(CN_graph)
#nodes again
#Node size
V(CN_graph)$size= degree(CN_graph, mode= "in")/5
#Node colour
V(CN_graph)$color<- "grey"
V(CN_graph)[degree(CN_graph, mode = "in")>8]$color <- "yellow"
#edge colour
E(CN_graph)$color <- "grey"
plot(CN_graph)
#fixing arrow head
plot(CN_graph, edge.arrow.size=0.25, edge.arrow.mode= "-")
#getting rid of loops
CN_graph2 <- simplify(CN_graph, remove.multiple = TRUE, remove.loops = TRUE)
layout1 <- layout.fruchterman.reingold(CN_graph2)
#Node size
V(CN_graph2)$size= degree(CN_graph2, mode= "in")/5
#Node colour
V(CN_graph2)$color<- "grey"
V(CN_graph2)[degree(CN_graph2, mode = "in")>8]$color <- "yellow"
#edge colour
E(CN_graph2)$color <- "grey"
#plotting graph without loops
plot(CN_graph2, edge.arrow.size=0.25, edge.arrow.mode= "-")
#Load attributes thing
set.seed(3256)
layout1 <- layout.fruchterman.reingold(CN_graph2, niter=500)
DN_edgelist<- read.csv("DiscussionNetworks")
DN_edgelist<- read.csv("DiscussionNetworks.csv")
DN_edgelist<- read.csv("DiscussionNetwork.csv")
CN_edgelist<- read.csv("ColleaugueNetwork.csv")
CN_graph= graph.data.frame(CN_edgelist, directed =TRUE)
DN_edgelist<- read.csv("DiscussionNetwork.csv")
DN_graph= graph.data.frame(DN_edgelist, directed =TRUE)
#set seed
set.seed(3952)
layout1<- layout.fruchterman.reingold(CN_graph) #using a spring network reflects
#distances within network
?layout
#node options
V(CN_graph)$color<- "grey"
V(CN_graph)[degree(CN_graph, mode = "in")>8]$color <- "yellow"
#edge options
E(CN_graph)$color <- "grey"
#plotting
plot(CN_graph)
plot(CN_graph)
#nodes again
#Node size
V(CN_graph)$size= degree(CN_graph, mode= "in")/5
#Node colour
V(CN_graph)$color<- "grey"
V(CN_graph)[degree(CN_graph, mode = "in")>8]$color <- "yellow"
#edge colour
E(CN_graph)$color <- "grey"
plot(CN_graph)
plot(CN_graph, edge.arrow.size=0.25, edge.arrow.mode= "-")
CN_graph2 <- simplify(CN_graph, remove.multiple = TRUE, remove.loops = TRUE)
layout1 <- layout.fruchterman.reingold(CN_graph2)
#Node size
V(CN_graph2)$size= degree(CN_graph2, mode= "in")/5
#Node colour
V(CN_graph2)$color<- "grey"
V(CN_graph2)[degree(CN_graph2, mode = "in")>8]$color <- "yellow"
#edge colour
E(CN_graph2)$color <- "grey"
#plotting graph without loops
plot(CN_graph2, edge.arrow.size=0.25, edge.arrow.mode= "-")
#Load colleaugue attributess
set.seed(3256)
layout1 <- layout.fruchterman.reingold(CN_graph2, niter=500)
#Node colour...
V(CN_graph2)$color <- "grey"
V(CN_graph2)[degree(CN_graph, mode="in")>8]$color <- "yellow"
V(CN_graph2)$size=degree(CN_graph, mode = "in")/5
V(CN_graph2)$color <- ifelse(CNA[V(CN_graph2), 2] == "Researcher", "blue", "red")
#edge colour
E(CN_graph2)$color <- "grey"
plot(CN_graph2, edge.arrow.size= 0.25, edge.arrow.mode= "-", vertex.label= NA)
DN_graph2 <- simplify(DN_graph, remove.multiple = TRUE, remove.loops = TRUE)
set.seed(3256)
layout1 <- layout.fruchterman.reingold(DN_graph2, niter=500)
#nodes size and colour
V(DN_graph2)$size=degree(DN_graph, mode = "in")/5
V(DN_graph2)$color <- ifelse(DNA[V(DN_graph2), 2] == "Researcher", "blue", "red")
#Edge colour
E(DN_graph2)$color <- "grey"
plot(DN_graph2,edge.arrow.size= 0.25, edge.arrow.mode= "-", vertex.label= NA)
DNA <- read_csv("DiscussionAttributes.csv")
#Load the discussion networks attributes
DNA <- read_csv("DiscussionAttributes.csv")
set.seed(3256)
layout1 <- layout.fruchterman.reingold(DN_graph2, niter=500)
#nodes size and colour
V(DN_graph2)$size=degree(DN_graph, mode = "in")/5
V(DN_graph2)$color <- ifelse(DNA[V(DN_graph2), 2] == "Researcher", "blue", "red")
#Edge colour
E(DN_graph2)$color <- "grey"
plot(DN_graph2,edge.arrow.size= 0.25, edge.arrow.mode= "-", vertex.label= NA)
#try with a different layout
set.seed(3256)
layout1 <- layout_with_kk(DN_graph2)
#nodes size and colour
V(DN_graph2)$size=degree(DN_graph, mode = "in")/5 #emphasizes distances
V(DN_graph2)$color <- ifelse(DNA[V(DN_graph2), 2] == "Researcher", "blue", "red")
#Edge colour
E(DN_graph2)$color <- "grey"
plot(DN_graph2,edge.arrow.size= 0.25, edge.arrow.mode= "-", vertex.label= NA)
plot(DN_graph2,edge.arrow.size= 0.25, edge.arrow.mode= "-", vertex.label= NA)
#Density - how connected you are vs how connected you could be
graph.density(DN_graph2, loop=FALSE)
graph.density(CN_graph2, loop= FALSE)
#average path length - larger path distance = less dense network
mean_distance(DN_graph2)
mean_distance(CN_graph2)
#degree distribution - how connected you are to 1 person vs more people
degree_distribution(DN_graph2)
DDD <- degree.distribution(DN_graph2)
DDD2 <- as.data.frame(DDD)
qplot (DDD, data=DDD2, geom = "histogram", binwidth= 0.001,
ylab= "Number of Connections",
xlab= "Probability of Number of Connections")
#clustering coefficients
transitivity (DN_graph2)
transitivity (CN_graph2)
#create an object to use later
DNT<- transitivity (DN_graph2)
CNT<- transitivity (CN_graph2)
#postitional features
#degree: in, out, all centrality
DOD<- degree(DN_graph2, mode= "out")
DOD <- as.data.frame(DOD)
DID<- degree(DN_graph2, mode= "in")
DID <- as.data.frame(DID)
#visuale to understand positionality with "in"
set.seed(3256)
layout1 <- layout.fruchterman.reingold(DN_graph2, niter= 500)
#nodes size and colour
V(DN_graph2)$size=degree(DN_graph, mode = "in")/5 #emphasizes distances
V(DN_graph2)$color <- ifelse(DNA[V(DN_graph2), 2] == "Researcher", "blue", "red")
#Edge colour
E(DN_graph2)$color <- "grey"
plot(DN_graph2,edge.arrow.size= 0.25, edge.arrow.mode= "-", vertex.label= NA)
#visualize with "out"
set.seed(3256)
layout1 <- layout.fruchterman.reingold(DN_graph2, niter= 500)
#nodes size and colour
V(DN_graph2)$size=degree(DN_graph, mode = "out")/5 #emphasizes distances
V(DN_graph2)$color <- ifelse(DNA[V(DN_graph2), 2] == "Researcher", "blue", "red")
#Edge colour
E(DN_graph2)$color <- "grey"
plot(DN_graph2,edge.arrow.size= 0.25, edge.arrow.mode= "-", vertex.label= NA)
#visualize with "all"
set.seed(3256)
layout1 <- layout.fruchterman.reingold(DN_graph2, niter= 500)
#nodes size and colour
V(DN_graph2)$size=degree(DN_graph, mode = "all")/5 #emphasizes distances
V(DN_graph2)$color <- ifelse(DNA[V(DN_graph2), 2] == "Researcher", "blue", "red")
#Edge colour
E(DN_graph2)$color <- "grey"
plot(DN_graph2,edge.arrow.size= 0.25, edge.arrow.mode= "-", vertex.label= NA)
